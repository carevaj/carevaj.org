import { merge } from "../core/utils/object.ts";
import { concurrent } from "../core/utils/concurrent.ts";
// Default options
export const defaults = {
  extensions: [
    ".html"
  ],
  fn: (url)=>url
};
/** A plugin to modify all URLs found in the HTML documents */ export default function(userOptions) {
  const options = merge(defaults, userOptions);
  function replace(url, page, element) {
    return url ? options.fn(url, page, element) : "";
  }
  async function replaceSrcset(attr, page, element) {
    const srcset = attr ? attr.trim().split(",") : [];
    const replaced = [];
    for (const src of srcset){
      const [, url, rest] = src.trim().match(/^(\S+)(.*)/);
      replaced.push(await replace(url, page, element) + rest);
    }
    return replaced.join(", ");
  }
  return (site)=>{
    site.process(options.extensions, (pages)=>concurrent(pages, async (page)=>{
        const { document } = page;
        if (!document) {
          return;
        }
        for (const element of document.querySelectorAll("[href]")){
          element.setAttribute("href", await replace(element.getAttribute("href"), page, element));
        }
        for (const element of document.querySelectorAll("[src]")){
          element.setAttribute("src", await replace(element.getAttribute("src"), page, element));
        }
        for (const element of document.querySelectorAll("video[poster]")){
          element.setAttribute("poster", await replace(element.getAttribute("poster"), page, element));
        }
        for (const element of document.querySelectorAll("[srcset]")){
          element.setAttribute("srcset", await replaceSrcset(element.getAttribute("srcset"), page, element));
        }
        for (const element of document.querySelectorAll("[imagesrcset]")){
          element.setAttribute("imagesrcset", await replaceSrcset(element.getAttribute("imagesrcset"), page, element));
        }
      }));
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvbHVtZUB2Mi4yLjAvcGx1Z2lucy9tb2RpZnlfdXJscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtZXJnZSB9IGZyb20gXCIuLi9jb3JlL3V0aWxzL29iamVjdC50c1wiO1xuaW1wb3J0IHsgY29uY3VycmVudCB9IGZyb20gXCIuLi9jb3JlL3V0aWxzL2NvbmN1cnJlbnQudHNcIjtcblxuaW1wb3J0IHR5cGUgU2l0ZSBmcm9tIFwiLi4vY29yZS9zaXRlLnRzXCI7XG5pbXBvcnQgdHlwZSB7IFBhZ2UgfSBmcm9tIFwiLi4vY29yZS9maWxlLnRzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgT3B0aW9ucyB7XG4gIC8qKiBUaGUgbGlzdCBvZiBleHRlbnNpb25zIHRoaXMgcGx1Z2luIGFwcGxpZXMgdG8gKi9cbiAgZXh0ZW5zaW9ucz86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBUaGUgZnVuY3Rpb24gdG8gZ2VuZXJhdGUgdGhlIG5ldyB1cmxcbiAgICogQGRlZmF1bHQgYCh1cmwpID0+IHVybGBcbiAgICovXG4gIGZuOiAodXJsOiBzdHJpbmcsIHBhZ2U6IFBhZ2UsIGVsZW1lbnQ6IEVsZW1lbnQpID0+IHN0cmluZyB8IFByb21pc2U8c3RyaW5nPjtcbn1cblxuLy8gRGVmYXVsdCBvcHRpb25zXG5leHBvcnQgY29uc3QgZGVmYXVsdHM6IE9wdGlvbnMgPSB7XG4gIGV4dGVuc2lvbnM6IFtcIi5odG1sXCJdLFxuICBmbjogKHVybCkgPT4gdXJsLFxufTtcblxuLyoqIEEgcGx1Z2luIHRvIG1vZGlmeSBhbGwgVVJMcyBmb3VuZCBpbiB0aGUgSFRNTCBkb2N1bWVudHMgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICh1c2VyT3B0aW9uczogT3B0aW9ucykge1xuICBjb25zdCBvcHRpb25zID0gbWVyZ2UoZGVmYXVsdHMsIHVzZXJPcHRpb25zKTtcblxuICBmdW5jdGlvbiByZXBsYWNlKFxuICAgIHVybDogc3RyaW5nIHwgbnVsbCxcbiAgICBwYWdlOiBQYWdlLFxuICAgIGVsZW1lbnQ6IEVsZW1lbnQsXG4gICk6IHN0cmluZyB8IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHVybCA/IG9wdGlvbnMuZm4odXJsLCBwYWdlLCBlbGVtZW50KSA6IFwiXCI7XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiByZXBsYWNlU3Jjc2V0KFxuICAgIGF0dHI6IHN0cmluZyB8IG51bGwsXG4gICAgcGFnZTogUGFnZSxcbiAgICBlbGVtZW50OiBFbGVtZW50LFxuICApOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IHNyY3NldCA9IGF0dHIgPyBhdHRyLnRyaW0oKS5zcGxpdChcIixcIikgOiBbXTtcbiAgICBjb25zdCByZXBsYWNlZDogc3RyaW5nW10gPSBbXTtcbiAgICBmb3IgKGNvbnN0IHNyYyBvZiBzcmNzZXQpIHtcbiAgICAgIGNvbnN0IFssIHVybCwgcmVzdF0gPSBzcmMudHJpbSgpLm1hdGNoKC9eKFxcUyspKC4qKS8pITtcbiAgICAgIHJlcGxhY2VkLnB1c2goYXdhaXQgcmVwbGFjZSh1cmwsIHBhZ2UsIGVsZW1lbnQpICsgcmVzdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcGxhY2VkLmpvaW4oXCIsIFwiKTtcbiAgfVxuXG4gIHJldHVybiAoc2l0ZTogU2l0ZSkgPT4ge1xuICAgIHNpdGUucHJvY2VzcyhcbiAgICAgIG9wdGlvbnMuZXh0ZW5zaW9ucyxcbiAgICAgIChwYWdlcykgPT5cbiAgICAgICAgY29uY3VycmVudChwYWdlcywgYXN5bmMgKHBhZ2U6IFBhZ2UpID0+IHtcbiAgICAgICAgICBjb25zdCB7IGRvY3VtZW50IH0gPSBwYWdlO1xuXG4gICAgICAgICAgaWYgKCFkb2N1bWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2hyZWZdXCIpKSB7XG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgXCJocmVmXCIsXG4gICAgICAgICAgICAgIGF3YWl0IHJlcGxhY2UoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpLCBwYWdlLCBlbGVtZW50KSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc3JjXVwiKSkge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgIFwic3JjXCIsXG4gICAgICAgICAgICAgIGF3YWl0IHJlcGxhY2UoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJzcmNcIiksIHBhZ2UsIGVsZW1lbnQpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInZpZGVvW3Bvc3Rlcl1cIikpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICBcInBvc3RlclwiLFxuICAgICAgICAgICAgICBhd2FpdCByZXBsYWNlKGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwicG9zdGVyXCIpLCBwYWdlLCBlbGVtZW50KSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc3Jjc2V0XVwiKSkge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgIFwic3Jjc2V0XCIsXG4gICAgICAgICAgICAgIGF3YWl0IHJlcGxhY2VTcmNzZXQoXG4gICAgICAgICAgICAgICAgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJzcmNzZXRcIiksXG4gICAgICAgICAgICAgICAgcGFnZSxcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltpbWFnZXNyY3NldF1cIikpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFxuICAgICAgICAgICAgICBcImltYWdlc3Jjc2V0XCIsXG4gICAgICAgICAgICAgIGF3YWl0IHJlcGxhY2VTcmNzZXQoXG4gICAgICAgICAgICAgICAgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJpbWFnZXNyY3NldFwiKSxcbiAgICAgICAgICAgICAgICBwYWdlLFxuICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgKTtcbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLEtBQUssUUFBUSwwQkFBMEI7QUFDaEQsU0FBUyxVQUFVLFFBQVEsOEJBQThCO0FBZ0J6RCxrQkFBa0I7QUFDbEIsT0FBTyxNQUFNLFdBQW9CO0VBQy9CLFlBQVk7SUFBQztHQUFRO0VBQ3JCLElBQUksQ0FBQyxNQUFRO0FBQ2YsRUFBRTtBQUVGLDREQUE0RCxHQUM1RCxlQUFlLFNBQVUsV0FBb0I7RUFDM0MsTUFBTSxVQUFVLE1BQU0sVUFBVTtFQUVoQyxTQUFTLFFBQ1AsR0FBa0IsRUFDbEIsSUFBVSxFQUNWLE9BQWdCO0lBRWhCLE9BQU8sTUFBTSxRQUFRLEVBQUUsQ0FBQyxLQUFLLE1BQU0sV0FBVztFQUNoRDtFQUVBLGVBQWUsY0FDYixJQUFtQixFQUNuQixJQUFVLEVBQ1YsT0FBZ0I7SUFFaEIsTUFBTSxTQUFTLE9BQU8sS0FBSyxJQUFJLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRTtJQUNqRCxNQUFNLFdBQXFCLEVBQUU7SUFDN0IsS0FBSyxNQUFNLE9BQU8sT0FBUTtNQUN4QixNQUFNLEdBQUcsS0FBSyxLQUFLLEdBQUcsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDO01BQ3ZDLFNBQVMsSUFBSSxDQUFDLE1BQU0sUUFBUSxLQUFLLE1BQU0sV0FBVztJQUNwRDtJQUVBLE9BQU8sU0FBUyxJQUFJLENBQUM7RUFDdkI7RUFFQSxPQUFPLENBQUM7SUFDTixLQUFLLE9BQU8sQ0FDVixRQUFRLFVBQVUsRUFDbEIsQ0FBQyxRQUNDLFdBQVcsT0FBTyxPQUFPO1FBQ3ZCLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRztRQUVyQixJQUFJLENBQUMsVUFBVTtVQUNiO1FBQ0Y7UUFFQSxLQUFLLE1BQU0sV0FBVyxTQUFTLGdCQUFnQixDQUFDLFVBQVc7VUFDekQsUUFBUSxZQUFZLENBQ2xCLFFBQ0EsTUFBTSxRQUFRLFFBQVEsWUFBWSxDQUFDLFNBQVMsTUFBTTtRQUV0RDtRQUVBLEtBQUssTUFBTSxXQUFXLFNBQVMsZ0JBQWdCLENBQUMsU0FBVTtVQUN4RCxRQUFRLFlBQVksQ0FDbEIsT0FDQSxNQUFNLFFBQVEsUUFBUSxZQUFZLENBQUMsUUFBUSxNQUFNO1FBRXJEO1FBRUEsS0FBSyxNQUFNLFdBQVcsU0FBUyxnQkFBZ0IsQ0FBQyxpQkFBa0I7VUFDaEUsUUFBUSxZQUFZLENBQ2xCLFVBQ0EsTUFBTSxRQUFRLFFBQVEsWUFBWSxDQUFDLFdBQVcsTUFBTTtRQUV4RDtRQUVBLEtBQUssTUFBTSxXQUFXLFNBQVMsZ0JBQWdCLENBQUMsWUFBYTtVQUMzRCxRQUFRLFlBQVksQ0FDbEIsVUFDQSxNQUFNLGNBQ0osUUFBUSxZQUFZLENBQUMsV0FDckIsTUFDQTtRQUdOO1FBRUEsS0FBSyxNQUFNLFdBQVcsU0FBUyxnQkFBZ0IsQ0FBQyxpQkFBa0I7VUFDaEUsUUFBUSxZQUFZLENBQ2xCLGVBQ0EsTUFBTSxjQUNKLFFBQVEsWUFBWSxDQUFDLGdCQUNyQixNQUNBO1FBR047TUFDRjtFQUVOO0FBQ0YifQ==