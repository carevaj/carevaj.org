/** Base key mapping. */ export const KeyMap = {
  /* xterm/gnome ESC [ letter (with modifier) */ "[P": "f1",
  "[Q": "f2",
  "[R": "f3",
  "[S": "f4",
  /* xterm/gnome ESC O letter (without modifier) */ "OP": "f1",
  "OQ": "f2",
  "OR": "f3",
  "OS": "f4",
  /* xterm/rxvt ESC [ number ~ */ "[11~": "f1",
  "[12~": "f2",
  "[13~": "f3",
  "[14~": "f4",
  /* from Cygwin and used in libuv */ "[[A": "f1",
  "[[B": "f2",
  "[[C": "f3",
  "[[D": "f4",
  "[[E": "f5",
  /* common */ "[15~": "f5",
  "[17~": "f6",
  "[18~": "f7",
  "[19~": "f8",
  "[20~": "f9",
  "[21~": "f10",
  "[23~": "f11",
  "[24~": "f12",
  /* xterm ESC [ letter */ "[A": "up",
  "[B": "down",
  "[C": "right",
  "[D": "left",
  "[E": "clear",
  "[F": "end",
  "[H": "home",
  /* xterm/gnome ESC O letter */ "OA": "up",
  "OB": "down",
  "OC": "right",
  "OD": "left",
  "OE": "clear",
  "OF": "end",
  "OH": "home",
  /* xterm/rxvt ESC [ number ~ */ "[1~": "home",
  "[2~": "insert",
  "[3~": "delete",
  "[4~": "end",
  "[5~": "pageup",
  "[6~": "pagedown",
  /* putty */ "[[5~": "pageup",
  "[[6~": "pagedown",
  /* rxvt */ "[7~": "home",
  "[8~": "end"
};
/** Shift key mapping. */ export const KeyMapShift = {
  /* rxvt keys with modifiers */ "[a": "up",
  "[b": "down",
  "[c": "right",
  "[d": "left",
  "[e": "clear",
  "[2$": "insert",
  "[3$": "delete",
  "[5$": "pageup",
  "[6$": "pagedown",
  "[7$": "home",
  "[8$": "end",
  "[Z": "tab"
};
/** Ctrl key mapping. */ export const KeyMapCtrl = {
  /* rxvt keys with modifiers */ "Oa": "up",
  "Ob": "down",
  "Oc": "right",
  "Od": "left",
  "Oe": "clear",
  "[2^": "insert",
  "[3^": "delete",
  "[5^": "pageup",
  "[6^": "pagedown",
  "[7^": "home",
  "[8^": "end"
};
/** Special key mapping. */ export const SpecialKeyMap = {
  "\r": "return",
  "\n": "enter",
  "\t": "tab",
  "\b": "backspace",
  "\x7f": "backspace",
  "\x1b": "escape",
  " ": "space"
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvY2xpZmZ5QHYwLjI1Ljcva2V5Y29kZS9rZXlfY29kZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIEJhc2Uga2V5IG1hcHBpbmcuICovXG5leHBvcnQgY29uc3QgS2V5TWFwOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAvKiB4dGVybS9nbm9tZSBFU0MgWyBsZXR0ZXIgKHdpdGggbW9kaWZpZXIpICovXG4gIFwiW1BcIjogXCJmMVwiLFxuICBcIltRXCI6IFwiZjJcIixcbiAgXCJbUlwiOiBcImYzXCIsXG4gIFwiW1NcIjogXCJmNFwiLFxuXG4gIC8qIHh0ZXJtL2dub21lIEVTQyBPIGxldHRlciAod2l0aG91dCBtb2RpZmllcikgKi9cbiAgXCJPUFwiOiBcImYxXCIsXG4gIFwiT1FcIjogXCJmMlwiLFxuICBcIk9SXCI6IFwiZjNcIixcbiAgXCJPU1wiOiBcImY0XCIsXG5cbiAgLyogeHRlcm0vcnh2dCBFU0MgWyBudW1iZXIgfiAqL1xuICBcIlsxMX5cIjogXCJmMVwiLFxuICBcIlsxMn5cIjogXCJmMlwiLFxuICBcIlsxM35cIjogXCJmM1wiLFxuICBcIlsxNH5cIjogXCJmNFwiLFxuXG4gIC8qIGZyb20gQ3lnd2luIGFuZCB1c2VkIGluIGxpYnV2ICovXG4gIFwiW1tBXCI6IFwiZjFcIixcbiAgXCJbW0JcIjogXCJmMlwiLFxuICBcIltbQ1wiOiBcImYzXCIsXG4gIFwiW1tEXCI6IFwiZjRcIixcbiAgXCJbW0VcIjogXCJmNVwiLFxuXG4gIC8qIGNvbW1vbiAqL1xuICBcIlsxNX5cIjogXCJmNVwiLFxuICBcIlsxN35cIjogXCJmNlwiLFxuICBcIlsxOH5cIjogXCJmN1wiLFxuICBcIlsxOX5cIjogXCJmOFwiLFxuICBcIlsyMH5cIjogXCJmOVwiLFxuICBcIlsyMX5cIjogXCJmMTBcIixcbiAgXCJbMjN+XCI6IFwiZjExXCIsXG4gIFwiWzI0flwiOiBcImYxMlwiLFxuXG4gIC8qIHh0ZXJtIEVTQyBbIGxldHRlciAqL1xuICBcIltBXCI6IFwidXBcIixcbiAgXCJbQlwiOiBcImRvd25cIixcbiAgXCJbQ1wiOiBcInJpZ2h0XCIsXG4gIFwiW0RcIjogXCJsZWZ0XCIsXG4gIFwiW0VcIjogXCJjbGVhclwiLFxuICBcIltGXCI6IFwiZW5kXCIsXG4gIFwiW0hcIjogXCJob21lXCIsXG5cbiAgLyogeHRlcm0vZ25vbWUgRVNDIE8gbGV0dGVyICovXG4gIFwiT0FcIjogXCJ1cFwiLFxuICBcIk9CXCI6IFwiZG93blwiLFxuICBcIk9DXCI6IFwicmlnaHRcIixcbiAgXCJPRFwiOiBcImxlZnRcIixcbiAgXCJPRVwiOiBcImNsZWFyXCIsXG4gIFwiT0ZcIjogXCJlbmRcIixcbiAgXCJPSFwiOiBcImhvbWVcIixcblxuICAvKiB4dGVybS9yeHZ0IEVTQyBbIG51bWJlciB+ICovXG4gIFwiWzF+XCI6IFwiaG9tZVwiLFxuICBcIlsyflwiOiBcImluc2VydFwiLFxuICBcIlszflwiOiBcImRlbGV0ZVwiLFxuICBcIls0flwiOiBcImVuZFwiLFxuICBcIls1flwiOiBcInBhZ2V1cFwiLFxuICBcIls2flwiOiBcInBhZ2Vkb3duXCIsXG5cbiAgLyogcHV0dHkgKi9cbiAgXCJbWzV+XCI6IFwicGFnZXVwXCIsXG4gIFwiW1s2flwiOiBcInBhZ2Vkb3duXCIsXG5cbiAgLyogcnh2dCAqL1xuICBcIls3flwiOiBcImhvbWVcIixcbiAgXCJbOH5cIjogXCJlbmRcIixcbn07XG5cbi8qKiBTaGlmdCBrZXkgbWFwcGluZy4gKi9cbmV4cG9ydCBjb25zdCBLZXlNYXBTaGlmdDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgLyogcnh2dCBrZXlzIHdpdGggbW9kaWZpZXJzICovXG4gIFwiW2FcIjogXCJ1cFwiLFxuICBcIltiXCI6IFwiZG93blwiLFxuICBcIltjXCI6IFwicmlnaHRcIixcbiAgXCJbZFwiOiBcImxlZnRcIixcbiAgXCJbZVwiOiBcImNsZWFyXCIsXG5cbiAgXCJbMiRcIjogXCJpbnNlcnRcIixcbiAgXCJbMyRcIjogXCJkZWxldGVcIixcbiAgXCJbNSRcIjogXCJwYWdldXBcIixcbiAgXCJbNiRcIjogXCJwYWdlZG93blwiLFxuICBcIls3JFwiOiBcImhvbWVcIixcbiAgXCJbOCRcIjogXCJlbmRcIixcblxuICBcIltaXCI6IFwidGFiXCIsXG59O1xuXG4vKiogQ3RybCBrZXkgbWFwcGluZy4gKi9cbmV4cG9ydCBjb25zdCBLZXlNYXBDdHJsOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAvKiByeHZ0IGtleXMgd2l0aCBtb2RpZmllcnMgKi9cbiAgXCJPYVwiOiBcInVwXCIsXG4gIFwiT2JcIjogXCJkb3duXCIsXG4gIFwiT2NcIjogXCJyaWdodFwiLFxuICBcIk9kXCI6IFwibGVmdFwiLFxuICBcIk9lXCI6IFwiY2xlYXJcIixcblxuICBcIlsyXlwiOiBcImluc2VydFwiLFxuICBcIlszXlwiOiBcImRlbGV0ZVwiLFxuICBcIls1XlwiOiBcInBhZ2V1cFwiLFxuICBcIls2XlwiOiBcInBhZ2Vkb3duXCIsXG4gIFwiWzdeXCI6IFwiaG9tZVwiLFxuICBcIls4XlwiOiBcImVuZFwiLFxufTtcblxuLyoqIFNwZWNpYWwga2V5IG1hcHBpbmcuICovXG5leHBvcnQgY29uc3QgU3BlY2lhbEtleU1hcDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgXCJcXHJcIjogXCJyZXR1cm5cIixcbiAgXCJcXG5cIjogXCJlbnRlclwiLFxuICBcIlxcdFwiOiBcInRhYlwiLFxuICBcIlxcYlwiOiBcImJhY2tzcGFjZVwiLFxuICBcIlxceDdmXCI6IFwiYmFja3NwYWNlXCIsXG4gIFwiXFx4MWJcIjogXCJlc2NhcGVcIixcbiAgXCIgXCI6IFwic3BhY2VcIixcbn07XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0JBQXNCLEdBQ3RCLE9BQU8sTUFBTSxTQUFpQztFQUM1Qyw0Q0FBNEMsR0FDNUMsTUFBTTtFQUNOLE1BQU07RUFDTixNQUFNO0VBQ04sTUFBTTtFQUVOLCtDQUErQyxHQUMvQyxNQUFNO0VBQ04sTUFBTTtFQUNOLE1BQU07RUFDTixNQUFNO0VBRU4sNkJBQTZCLEdBQzdCLFFBQVE7RUFDUixRQUFRO0VBQ1IsUUFBUTtFQUNSLFFBQVE7RUFFUixpQ0FBaUMsR0FDakMsT0FBTztFQUNQLE9BQU87RUFDUCxPQUFPO0VBQ1AsT0FBTztFQUNQLE9BQU87RUFFUCxVQUFVLEdBQ1YsUUFBUTtFQUNSLFFBQVE7RUFDUixRQUFRO0VBQ1IsUUFBUTtFQUNSLFFBQVE7RUFDUixRQUFRO0VBQ1IsUUFBUTtFQUNSLFFBQVE7RUFFUixzQkFBc0IsR0FDdEIsTUFBTTtFQUNOLE1BQU07RUFDTixNQUFNO0VBQ04sTUFBTTtFQUNOLE1BQU07RUFDTixNQUFNO0VBQ04sTUFBTTtFQUVOLDRCQUE0QixHQUM1QixNQUFNO0VBQ04sTUFBTTtFQUNOLE1BQU07RUFDTixNQUFNO0VBQ04sTUFBTTtFQUNOLE1BQU07RUFDTixNQUFNO0VBRU4sNkJBQTZCLEdBQzdCLE9BQU87RUFDUCxPQUFPO0VBQ1AsT0FBTztFQUNQLE9BQU87RUFDUCxPQUFPO0VBQ1AsT0FBTztFQUVQLFNBQVMsR0FDVCxRQUFRO0VBQ1IsUUFBUTtFQUVSLFFBQVEsR0FDUixPQUFPO0VBQ1AsT0FBTztBQUNULEVBQUU7QUFFRix1QkFBdUIsR0FDdkIsT0FBTyxNQUFNLGNBQXNDO0VBQ2pELDRCQUE0QixHQUM1QixNQUFNO0VBQ04sTUFBTTtFQUNOLE1BQU07RUFDTixNQUFNO0VBQ04sTUFBTTtFQUVOLE9BQU87RUFDUCxPQUFPO0VBQ1AsT0FBTztFQUNQLE9BQU87RUFDUCxPQUFPO0VBQ1AsT0FBTztFQUVQLE1BQU07QUFDUixFQUFFO0FBRUYsc0JBQXNCLEdBQ3RCLE9BQU8sTUFBTSxhQUFxQztFQUNoRCw0QkFBNEIsR0FDNUIsTUFBTTtFQUNOLE1BQU07RUFDTixNQUFNO0VBQ04sTUFBTTtFQUNOLE1BQU07RUFFTixPQUFPO0VBQ1AsT0FBTztFQUNQLE9BQU87RUFDUCxPQUFPO0VBQ1AsT0FBTztFQUNQLE9BQU87QUFDVCxFQUFFO0FBRUYseUJBQXlCLEdBQ3pCLE9BQU8sTUFBTSxnQkFBd0M7RUFDbkQsTUFBTTtFQUNOLE1BQU07RUFDTixNQUFNO0VBQ04sTUFBTTtFQUNOLFFBQVE7RUFDUixRQUFRO0VBQ1IsS0FBSztBQUNQLEVBQUUifQ==