import { posix } from "../deps/path.ts";
import { documentToString, stringToDocument } from "./utils/dom.ts";
/** A page of the site */ export class Page {
  /** The src info */ src;
  /**
   * Used to save the page data
   */ data = {};
  /**
   * Internal data. Used to save arbitrary data by plugins and processors
   */ #_data = {};
  /** The page content (string or Uint8Array) */ #content;
  /** The parsed HTML (only for HTML documents) */ #document;
  /** Convenient way to create a page dynamically */ static create(data) {
    let { url, ...rest } = data;
    const basename = posix.basename(url).replace(/\.[\w.]+$/, "");
    const page = new Page();
    if (url.endsWith("/index.html")) {
      url = url.slice(0, -10);
    }
    page.data = {
      ...rest,
      url,
      page,
      basename
    };
    page.content = data.content;
    return page;
  }
  constructor(src){
    this.src = {
      path: "",
      ext: "",
      asset: true,
      ...src
    };
  }
  /**
   * The property _data is to store internal data,
   * used by plugins, processors, etc to save arbitrary values
   */ set _data(data) {
    this.#_data = data;
  }
  get _data() {
    return this.#_data;
  }
  /** Duplicate this page. */ duplicate(index, data) {
    const page = new Page({
      ...this.src
    });
    if (index !== undefined) {
      page.src.path += `[${index}]`;
    }
    data.page = page;
    page.data = data;
    return page;
  }
  /** Returns the output path of this page */ get outputPath() {
    const url = this.data.url;
    return decodeURI(url.endsWith("/") ? url + "index.html" : url);
  }
  /** Returns the source path of this page */ get sourcePath() {
    if (this.src.entry?.flags.has("remote")) {
      return this.src.entry.src;
    }
    if (!this.src.path) {
      return "(generated)";
    }
    return this.src.path + this.src.ext;
  }
  /** The content of this page */ set content(content) {
    this.#document = undefined;
    this.#content = content instanceof Uint8Array ? content : content && content.toString();
  }
  get content() {
    if (this.#document) {
      this.#content = documentToString(this.#document);
      this.#document = undefined;
    }
    return this.#content;
  }
  /** The parsed HTML code from the content */ set document(document) {
    this.#content = undefined;
    this.#document = document;
  }
  get document() {
    if (this.#document) {
      return this.#document;
    }
    const url = this.outputPath;
    if (this.#content && url.endsWith(".html")) {
      this.#document = stringToDocument(this.#content.toString());
    }
    return this.#document;
  }
}
//# sourceMappingURL=data:application/json;base64,