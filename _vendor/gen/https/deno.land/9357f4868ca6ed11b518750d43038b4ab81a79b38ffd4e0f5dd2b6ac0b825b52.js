import { GenericPrompt } from "./_generic_prompt.ts";
import { GenericSuggestions } from "./_generic_suggestions.ts";
import { brightBlue, normalize, yellow } from "./deps.ts";
import { Figures } from "./figures.ts";
/** Input prompt representation. */ export class Input extends GenericSuggestions {
  /** Execute the prompt and show cursor on end. */ static prompt(options) {
    if (typeof options === "string") {
      options = {
        message: options
      };
    }
    return new this({
      pointer: brightBlue(Figures.POINTER_SMALL),
      prefix: yellow("? "),
      indent: " ",
      listPointer: brightBlue(Figures.POINTER),
      maxRows: 8,
      minLength: 0,
      maxLength: Infinity,
      ...options
    }).prompt();
  }
  /**
   * Inject prompt value. Can be used for unit tests or pre selections.
   * @param value Input value.
   */ static inject(value) {
    GenericPrompt.inject(value);
  }
  success(value) {
    this.saveSuggestions(value);
    return super.success(value);
  }
  /** Get input value. */ getValue() {
    return this.settings.files ? normalize(this.inputValue) : this.inputValue;
  }
  /**
   * Validate input value.
   * @param value User input value.
   * @return True on success, false or error message on error.
   */ validate(value) {
    if (typeof value !== "string") {
      return false;
    }
    if (value.length < this.settings.minLength) {
      return `Value must be longer than ${this.settings.minLength} but has a length of ${value.length}.`;
    }
    if (value.length > this.settings.maxLength) {
      return `Value can't be longer than ${this.settings.maxLength} but has a length of ${value.length}.`;
    }
    return true;
  }
  /**
   * Map input value to output value.
   * @param value Input value.
   * @return Output value.
   */ transform(value) {
    return value.trim();
  }
  /**
   * Format output value.
   * @param value Output value.
   */ format(value) {
    return value;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvY2xpZmZ5QHYwLjI1LjcvcHJvbXB0L2lucHV0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdlbmVyaWNQcm9tcHQgfSBmcm9tIFwiLi9fZ2VuZXJpY19wcm9tcHQudHNcIjtcbmltcG9ydCB7XG4gIEdlbmVyaWNTdWdnZXN0aW9ucyxcbiAgR2VuZXJpY1N1Z2dlc3Rpb25zS2V5cyxcbiAgR2VuZXJpY1N1Z2dlc3Rpb25zT3B0aW9ucyxcbiAgR2VuZXJpY1N1Z2dlc3Rpb25zU2V0dGluZ3MsXG59IGZyb20gXCIuL19nZW5lcmljX3N1Z2dlc3Rpb25zLnRzXCI7XG5pbXBvcnQgeyBicmlnaHRCbHVlLCBub3JtYWxpemUsIHllbGxvdyB9IGZyb20gXCIuL2RlcHMudHNcIjtcbmltcG9ydCB7IEZpZ3VyZXMgfSBmcm9tIFwiLi9maWd1cmVzLnRzXCI7XG5cbmV4cG9ydCB0eXBlIElucHV0S2V5cyA9IEdlbmVyaWNTdWdnZXN0aW9uc0tleXM7XG5cbi8qKiBJbnB1dCBwcm9tcHQgb3B0aW9ucy4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5wdXRPcHRpb25zXG4gIGV4dGVuZHMgR2VuZXJpY1N1Z2dlc3Rpb25zT3B0aW9uczxzdHJpbmcsIHN0cmluZz4ge1xuICBtaW5MZW5ndGg/OiBudW1iZXI7XG4gIG1heExlbmd0aD86IG51bWJlcjtcbiAga2V5cz86IElucHV0S2V5cztcbn1cblxuLyoqIElucHV0IHByb21wdCBzZXR0aW5ncy4gKi9cbmludGVyZmFjZSBJbnB1dFNldHRpbmdzIGV4dGVuZHMgR2VuZXJpY1N1Z2dlc3Rpb25zU2V0dGluZ3M8c3RyaW5nLCBzdHJpbmc+IHtcbiAgbWluTGVuZ3RoOiBudW1iZXI7XG4gIG1heExlbmd0aDogbnVtYmVyO1xuICBrZXlzPzogSW5wdXRLZXlzO1xufVxuXG4vKiogSW5wdXQgcHJvbXB0IHJlcHJlc2VudGF0aW9uLiAqL1xuZXhwb3J0IGNsYXNzIElucHV0IGV4dGVuZHMgR2VuZXJpY1N1Z2dlc3Rpb25zPHN0cmluZywgc3RyaW5nLCBJbnB1dFNldHRpbmdzPiB7XG4gIC8qKiBFeGVjdXRlIHRoZSBwcm9tcHQgYW5kIHNob3cgY3Vyc29yIG9uIGVuZC4gKi9cbiAgcHVibGljIHN0YXRpYyBwcm9tcHQob3B0aW9uczogc3RyaW5nIHwgSW5wdXRPcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG9wdGlvbnMgPSB7IG1lc3NhZ2U6IG9wdGlvbnMgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IHRoaXMoe1xuICAgICAgcG9pbnRlcjogYnJpZ2h0Qmx1ZShGaWd1cmVzLlBPSU5URVJfU01BTEwpLFxuICAgICAgcHJlZml4OiB5ZWxsb3coXCI/IFwiKSxcbiAgICAgIGluZGVudDogXCIgXCIsXG4gICAgICBsaXN0UG9pbnRlcjogYnJpZ2h0Qmx1ZShGaWd1cmVzLlBPSU5URVIpLFxuICAgICAgbWF4Um93czogOCxcbiAgICAgIG1pbkxlbmd0aDogMCxcbiAgICAgIG1heExlbmd0aDogSW5maW5pdHksXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH0pLnByb21wdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluamVjdCBwcm9tcHQgdmFsdWUuIENhbiBiZSB1c2VkIGZvciB1bml0IHRlc3RzIG9yIHByZSBzZWxlY3Rpb25zLlxuICAgKiBAcGFyYW0gdmFsdWUgSW5wdXQgdmFsdWUuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGluamVjdCh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgR2VuZXJpY1Byb21wdC5pbmplY3QodmFsdWUpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHN1Y2Nlc3ModmFsdWU6IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgdGhpcy5zYXZlU3VnZ2VzdGlvbnModmFsdWUpO1xuICAgIHJldHVybiBzdXBlci5zdWNjZXNzKHZhbHVlKTtcbiAgfVxuXG4gIC8qKiBHZXQgaW5wdXQgdmFsdWUuICovXG4gIHByb3RlY3RlZCBnZXRWYWx1ZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmZpbGVzID8gbm9ybWFsaXplKHRoaXMuaW5wdXRWYWx1ZSkgOiB0aGlzLmlucHV0VmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGUgaW5wdXQgdmFsdWUuXG4gICAqIEBwYXJhbSB2YWx1ZSBVc2VyIGlucHV0IHZhbHVlLlxuICAgKiBAcmV0dXJuIFRydWUgb24gc3VjY2VzcywgZmFsc2Ugb3IgZXJyb3IgbWVzc2FnZSBvbiBlcnJvci5cbiAgICovXG4gIHByb3RlY3RlZCB2YWxpZGF0ZSh2YWx1ZTogc3RyaW5nKTogYm9vbGVhbiB8IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodmFsdWUubGVuZ3RoIDwgdGhpcy5zZXR0aW5ncy5taW5MZW5ndGgpIHtcbiAgICAgIHJldHVybiBgVmFsdWUgbXVzdCBiZSBsb25nZXIgdGhhbiAke3RoaXMuc2V0dGluZ3MubWluTGVuZ3RofSBidXQgaGFzIGEgbGVuZ3RoIG9mICR7dmFsdWUubGVuZ3RofS5gO1xuICAgIH1cbiAgICBpZiAodmFsdWUubGVuZ3RoID4gdGhpcy5zZXR0aW5ncy5tYXhMZW5ndGgpIHtcbiAgICAgIHJldHVybiBgVmFsdWUgY2FuJ3QgYmUgbG9uZ2VyIHRoYW4gJHt0aGlzLnNldHRpbmdzLm1heExlbmd0aH0gYnV0IGhhcyBhIGxlbmd0aCBvZiAke3ZhbHVlLmxlbmd0aH0uYDtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogTWFwIGlucHV0IHZhbHVlIHRvIG91dHB1dCB2YWx1ZS5cbiAgICogQHBhcmFtIHZhbHVlIElucHV0IHZhbHVlLlxuICAgKiBAcmV0dXJuIE91dHB1dCB2YWx1ZS5cbiAgICovXG4gIHByb3RlY3RlZCB0cmFuc2Zvcm0odmFsdWU6IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHZhbHVlLnRyaW0oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JtYXQgb3V0cHV0IHZhbHVlLlxuICAgKiBAcGFyYW0gdmFsdWUgT3V0cHV0IHZhbHVlLlxuICAgKi9cbiAgcHJvdGVjdGVkIGZvcm1hdCh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLGFBQWEsUUFBUSx1QkFBdUI7QUFDckQsU0FDRSxrQkFBa0IsUUFJYiw0QkFBNEI7QUFDbkMsU0FBUyxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sUUFBUSxZQUFZO0FBQzFELFNBQVMsT0FBTyxRQUFRLGVBQWU7QUFtQnZDLGlDQUFpQyxHQUNqQyxPQUFPLE1BQU0sY0FBYztFQUN6QiwrQ0FBK0MsR0FDL0MsT0FBYyxPQUFPLE9BQThCLEVBQW1CO0lBQ3BFLElBQUksT0FBTyxZQUFZLFVBQVU7TUFDL0IsVUFBVTtRQUFFLFNBQVM7TUFBUTtJQUMvQjtJQUVBLE9BQU8sSUFBSSxJQUFJLENBQUM7TUFDZCxTQUFTLFdBQVcsUUFBUSxhQUFhO01BQ3pDLFFBQVEsT0FBTztNQUNmLFFBQVE7TUFDUixhQUFhLFdBQVcsUUFBUSxPQUFPO01BQ3ZDLFNBQVM7TUFDVCxXQUFXO01BQ1gsV0FBVztNQUNYLEdBQUcsT0FBTztJQUNaLEdBQUcsTUFBTTtFQUNYO0VBRUE7OztHQUdDLEdBQ0QsT0FBYyxPQUFPLEtBQWEsRUFBUTtJQUN4QyxjQUFjLE1BQU0sQ0FBQztFQUN2QjtFQUVVLFFBQVEsS0FBYSxFQUFzQjtJQUNuRCxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQ3JCLE9BQU8sS0FBSyxDQUFDLFFBQVE7RUFDdkI7RUFFQSxxQkFBcUIsR0FDckIsQUFBVSxXQUFtQjtJQUMzQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLFVBQVUsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVTtFQUMzRTtFQUVBOzs7O0dBSUMsR0FDRCxBQUFVLFNBQVMsS0FBYSxFQUFvQjtJQUNsRCxJQUFJLE9BQU8sVUFBVSxVQUFVO01BQzdCLE9BQU87SUFDVDtJQUNBLElBQUksTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUU7TUFDMUMsT0FBTyxDQUFDLDBCQUEwQixFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLHFCQUFxQixFQUFFLE1BQU0sTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNwRztJQUNBLElBQUksTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUU7TUFDMUMsT0FBTyxDQUFDLDJCQUEyQixFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLHFCQUFxQixFQUFFLE1BQU0sTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNyRztJQUNBLE9BQU87RUFDVDtFQUVBOzs7O0dBSUMsR0FDRCxBQUFVLFVBQVUsS0FBYSxFQUFzQjtJQUNyRCxPQUFPLE1BQU0sSUFBSTtFQUNuQjtFQUVBOzs7R0FHQyxHQUNELEFBQVUsT0FBTyxLQUFhLEVBQVU7SUFDdEMsT0FBTztFQUNUO0FBQ0YifQ==