import { engine, FileLoader } from "../deps/vento.ts";
import loader from "../core/loaders/text.ts";
import { merge } from "../core/utils/object.ts";
import { normalizePath } from "../core/utils/path.ts";
// Default options
export const defaults = {
  extensions: [
    ".vento",
    ".vto"
  ],
  options: {
    dataVarname: "it",
    useWith: true,
    autoescape: false
  }
};
class LumeLoader extends FileLoader {
  fs;
  constructor(includes, fs){
    super(includes);
    this.fs = fs;
  }
  async load(file) {
    const entry = this.fs.entries.get(normalizePath(file));
    if (!entry) {
      throw new Error(`File not found: ${file}`);
    }
    const data = await entry.getContent(loader);
    return {
      source: data.content,
      data: data
    };
  }
}
/** Template engine to render Vento files */ export class VentoEngine {
  engine;
  includes;
  constructor(engine, includes){
    this.engine = engine;
    this.includes = includes;
  }
  deleteCache(file) {
    this.engine.cache.delete(file);
  }
  async render(content, data, filename) {
    const result = await this.engine.runString(content, data, filename);
    return result.content;
  }
  renderComponent(content, data) {
    const result = this.engine.runStringSync(content, data);
    return result.content;
  }
  addHelper(name, fn, options) {
    if (options.async) {
      this.engine.filters[name] = async function(...args) {
        return await fn.apply({
          data: this.data
        }, args);
      };
    } else {
      this.engine.filters[name] = function(...args) {
        return fn.apply({
          data: this.data
        }, args);
      };
    }
  }
}
/** Register the plugin to support Vento files */ export default function(userOptions) {
  return (site)=>{
    const options = merge({
      ...defaults,
      includes: site.options.includes
    }, userOptions);
    const vento = engine({
      includes: new LumeLoader(normalizePath(options.includes), site.fs),
      ...options.options
    });
    vento.tags.push(compTag);
    options.plugins?.forEach((plugin)=>vento.use(plugin));
    site.hooks.addVentoPlugin = (plugin)=>{
      vento.use(plugin);
    };
    site.hooks.vento = (callback)=>callback(vento);
    const ventoEngine = new VentoEngine(vento, options.includes);
    // Ignore includes folder
    if (options.includes) {
      site.ignore(options.includes);
    }
    // Load the pages and register the engine
    site.loadPages(options.extensions, {
      loader,
      engine: ventoEngine,
      pageSubExtension: options.pageSubExtension
    });
    site.filter("vto", filter, true);
    async function filter(string, data) {
      const result = await vento.runString(string, {
        ...site.scopedData.get("/"),
        ...data
      });
      return result.content;
    }
  };
}
/** Vento tag to render a component */ function compTag(env, code, output, tokens) {
  if (!code.startsWith("comp ")) {
    return;
  }
  const match = code.match(/^comp\s+([\w.]+)(?:\s+(\{.*\}))?(?:\s+(\/))?$/);
  if (!match) {
    throw new Error(`Invalid component tag: ${code}`);
  }
  const [_, comp, args, closed] = match;
  if (closed) {
    return `${output} += await comp.${comp}(${args || ""});`;
  }
  const compiled = [];
  const tmpOutput = `__content_${tokens.length}`;
  compiled.push("{");
  compiled.push(`let ${tmpOutput} = ""`);
  compiled.push(...env.compileTokens(tokens, tmpOutput, [
    "/comp"
  ]));
  if (tokens.length && (tokens[0][0] !== "tag" || tokens[0][1] !== "/comp")) {
    throw new Error(`Missing closing tag for component tag: ${code}`);
  }
  tokens.shift();
  compiled.push(`${output} += await comp.${comp}({...${args || "{}"}, content: ${tmpOutput}});`);
  compiled.push("}");
  return compiled.join("\n");
}
//# sourceMappingURL=data:application/json;base64,