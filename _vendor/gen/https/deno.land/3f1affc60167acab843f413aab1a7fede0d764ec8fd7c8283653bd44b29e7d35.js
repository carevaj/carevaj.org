import { merge } from "../core/utils/object.ts";
export const defaults = {
  name: "paginate",
  options: {
    size: 10
  }
};
/** Register the plugin to enable the `paginate` helper */ export default function(userOptions) {
  const options = merge(defaults, userOptions);
  return (site)=>{
    if (!userOptions?.options?.url) {
      const ext = site.options.prettyUrls ? "/index.html" : ".html";
      options.options.url = (page)=>`./page-${page}${ext}`;
    }
    // Register the helper
    site.data(options.name, createPaginator(options.options));
  };
}
/** Create a paginator function */ export function createPaginator(defaults) {
  return function paginate(results, userOptions = {}) {
    const options = merge(defaults, userOptions);
    const totalResults = results.length;
    const totalPages = Math.ceil(results.length / options.size);
    const result = [];
    let page = 0;
    while(++page <= totalPages){
      const data = createPageData(page);
      const from = (page - 1) * options.size;
      const to = from + options.size;
      data.results = results.slice(from, to);
      if (options.each) {
        options.each(data, page);
      }
      result.push(data);
    }
    return result;
    function createPageData(page) {
      return {
        url: options.url(page),
        results: [],
        pagination: {
          page,
          totalPages,
          totalResults,
          previous: page > 1 ? options.url(page - 1) : null,
          next: totalPages > page ? options.url(page + 1) : null
        }
      };
    }
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvbHVtZUB2Mi4yLjAvcGx1Z2lucy9wYWdpbmF0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtZXJnZSB9IGZyb20gXCIuLi9jb3JlL3V0aWxzL29iamVjdC50c1wiO1xuXG5pbXBvcnQgdHlwZSBTaXRlIGZyb20gXCIuLi9jb3JlL3NpdGUudHNcIjtcblxuLyoqIFRoZSBvcHRpb25zIGZvciB0aGUgcGFnaW5hdGUgaGVscGVyICovXG5leHBvcnQgaW50ZXJmYWNlIFBhZ2luYXRlT3B0aW9ucyB7XG4gIC8qKiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHBlciBwYWdlICovXG4gIHNpemU/OiBudW1iZXI7XG5cbiAgLyoqIFRoZSBmdW5jdGlvbiB0byBnZW5lcmF0ZSB0aGUgdXJsIG9mIHRoZSBwYWdlcyAqL1xuICB1cmw/OiAocGFnZTogbnVtYmVyKSA9PiBzdHJpbmc7XG5cbiAgLyoqIEZ1bmN0aW9uIHRvIG1vZGlmeSBvciBhZGQgZXh0cmEgZGF0YSB0byBlYWNoIHBhZ2UgKi9cbiAgZWFjaD86IChkYXRhOiBQYWdpbmF0ZVJlc3VsdDx1bmtub3duPiwgcGFnZTogbnVtYmVyKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgdHlwZSBQYWdpbmF0b3IgPSA8VD4oXG4gIHJlc3VsdHM6IFRbXSxcbiAgdXNlck9wdGlvbnM/OiBQYXJ0aWFsPFBhZ2luYXRlT3B0aW9ucz4sXG4pID0+IFBhZ2luYXRlUmVzdWx0PFQ+W107XG5cbi8qKiBQYWdpbmF0aW9uIGluZm8gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGFnaW5hdGlvbkluZm8ge1xuICAvKiogVGhlIGN1cnJlbnQgcGFnZSBudW1iZXIgKi9cbiAgcGFnZTogbnVtYmVyO1xuXG4gIC8qKiBUaGUgdG90YWwgbnVtYmVyIG9mIHBhZ2VzICovXG4gIHRvdGFsUGFnZXM6IG51bWJlcjtcblxuICAvKiogVGhlIHRvdGFsIG51bWJlciBvZiBlbGVtZW50cyAqL1xuICB0b3RhbFJlc3VsdHM6IG51bWJlcjtcblxuICAvKiogVGhlIHVybCBvZiB0aGUgcHJldmlvdXMgcGFnZSAqL1xuICBwcmV2aW91czogc3RyaW5nIHwgbnVsbDtcblxuICAvKiogVGhlIHVybCBvZiB0aGUgbmV4dCBwYWdlICovXG4gIG5leHQ6IHN0cmluZyB8IG51bGw7XG59XG5cbi8qKiBUaGUgcGFnaW5hdGUgcmVzdWx0ICovXG5leHBvcnQgaW50ZXJmYWNlIFBhZ2luYXRlUmVzdWx0PFQ+IHtcbiAgLyoqIFRoZSBwYWdlIHVybCAqL1xuICB1cmw6IHN0cmluZztcblxuICAvKiogVGhlIGVsZW1lbnRzIGluIHRoaXMgcGFnZSAqL1xuICByZXN1bHRzOiBUW107XG5cbiAgLyoqIFRoZSBwYWdpbmF0aW9uIGluZm8gKi9cbiAgcGFnaW5hdGlvbjogUGFnaW5hdGlvbkluZm87XG5cbiAgW2tleTogc3RyaW5nXTogdW5rbm93bjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPcHRpb25zIHtcbiAgLyoqIFRoZSBoZWxwZXIgbmFtZSAqL1xuICBuYW1lPzogc3RyaW5nO1xuXG4gIC8qKiBUaGUgZGVmYXVsdCBwYWdpbmF0aW9uIG9wdGlvbnMgKi9cbiAgb3B0aW9ucz86IFBhZ2luYXRlT3B0aW9ucztcbn1cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRzOiBPcHRpb25zID0ge1xuICBuYW1lOiBcInBhZ2luYXRlXCIsXG4gIG9wdGlvbnM6IHtcbiAgICBzaXplOiAxMCxcbiAgfSxcbn07XG5cbi8qKiBSZWdpc3RlciB0aGUgcGx1Z2luIHRvIGVuYWJsZSB0aGUgYHBhZ2luYXRlYCBoZWxwZXIgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICh1c2VyT3B0aW9ucz86IE9wdGlvbnMpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IG1lcmdlKGRlZmF1bHRzLCB1c2VyT3B0aW9ucyk7XG5cbiAgcmV0dXJuIChzaXRlOiBTaXRlKSA9PiB7XG4gICAgaWYgKCF1c2VyT3B0aW9ucz8ub3B0aW9ucz8udXJsKSB7XG4gICAgICBjb25zdCBleHQgPSBzaXRlLm9wdGlvbnMucHJldHR5VXJscyA/IFwiL2luZGV4Lmh0bWxcIiA6IFwiLmh0bWxcIjtcbiAgICAgIG9wdGlvbnMub3B0aW9ucy51cmwgPSAocGFnZTogbnVtYmVyKSA9PiBgLi9wYWdlLSR7cGFnZX0ke2V4dH1gO1xuICAgIH1cblxuICAgIC8vIFJlZ2lzdGVyIHRoZSBoZWxwZXJcbiAgICBzaXRlLmRhdGEob3B0aW9ucy5uYW1lLCBjcmVhdGVQYWdpbmF0b3Iob3B0aW9ucy5vcHRpb25zKSk7XG4gIH07XG59XG5cbi8qKiBDcmVhdGUgYSBwYWdpbmF0b3IgZnVuY3Rpb24gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQYWdpbmF0b3IoZGVmYXVsdHM6IFBhZ2luYXRlT3B0aW9ucyk6IFBhZ2luYXRvciB7XG4gIHJldHVybiBmdW5jdGlvbiBwYWdpbmF0ZTxUPihcbiAgICByZXN1bHRzOiBUW10sXG4gICAgdXNlck9wdGlvbnM6IFBhcnRpYWw8UGFnaW5hdGVPcHRpb25zPiA9IHt9LFxuICApIHtcbiAgICBjb25zdCBvcHRpb25zID0gbWVyZ2UoZGVmYXVsdHMsIHVzZXJPcHRpb25zKTtcbiAgICBjb25zdCB0b3RhbFJlc3VsdHMgPSByZXN1bHRzLmxlbmd0aDtcbiAgICBjb25zdCB0b3RhbFBhZ2VzID0gTWF0aC5jZWlsKHJlc3VsdHMubGVuZ3RoIC8gb3B0aW9ucy5zaXplKTtcblxuICAgIGNvbnN0IHJlc3VsdDogUGFnaW5hdGVSZXN1bHQ8VD5bXSA9IFtdO1xuICAgIGxldCBwYWdlID0gMDtcblxuICAgIHdoaWxlICgrK3BhZ2UgPD0gdG90YWxQYWdlcykge1xuICAgICAgY29uc3QgZGF0YSA9IGNyZWF0ZVBhZ2VEYXRhKHBhZ2UpO1xuICAgICAgY29uc3QgZnJvbSA9IChwYWdlIC0gMSkgKiBvcHRpb25zLnNpemU7XG4gICAgICBjb25zdCB0byA9IGZyb20gKyBvcHRpb25zLnNpemU7XG4gICAgICBkYXRhLnJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKGZyb20sIHRvKTtcblxuICAgICAgaWYgKG9wdGlvbnMuZWFjaCkge1xuICAgICAgICBvcHRpb25zLmVhY2goZGF0YSwgcGFnZSk7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdC5wdXNoKGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVQYWdlRGF0YShwYWdlOiBudW1iZXIpOiBQYWdpbmF0ZVJlc3VsdDxUPiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1cmw6IG9wdGlvbnMudXJsKHBhZ2UpLFxuICAgICAgICByZXN1bHRzOiBbXSxcbiAgICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICAgIHBhZ2UsXG4gICAgICAgICAgdG90YWxQYWdlcyxcbiAgICAgICAgICB0b3RhbFJlc3VsdHMsXG4gICAgICAgICAgcHJldmlvdXM6IHBhZ2UgPiAxID8gb3B0aW9ucy51cmwocGFnZSAtIDEpIDogbnVsbCxcbiAgICAgICAgICBuZXh0OiB0b3RhbFBhZ2VzID4gcGFnZSA/IG9wdGlvbnMudXJsKHBhZ2UgKyAxKSA6IG51bGwsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxuLyoqIEV4dGVuZHMgRGF0YSBpbnRlcmZhY2UgKi9cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgbmFtZXNwYWNlIEx1bWUge1xuICAgIGV4cG9ydCB0eXBlIHsgUGFnaW5hdGVSZXN1bHQgfTtcblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRGF0YSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBwYWdpbmF0b3IgaGVscGVyXG4gICAgICAgKiBAc2VlIGh0dHBzOi8vbHVtZS5sYW5kL3BsdWdpbnMvcGFnaW5hdGUvXG4gICAgICAgKi9cbiAgICAgIHBhZ2luYXRlOiBQYWdpbmF0b3I7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHBhZ2luYXRpb24gaW5mb1xuICAgICAgICogQHNlZSBodHRwczovL2x1bWUubGFuZC9wbHVnaW5zL3BhZ2luYXRlL1xuICAgICAgICovXG4gICAgICBwYWdpbmF0aW9uPzogUGFnaW5hdGlvbkluZm87XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHBhZ2luYXRpb24gcmVzdWx0XG4gICAgICAgKiBAc2VlIGh0dHBzOi8vbHVtZS5sYW5kL3BsdWdpbnMvcGFnaW5hdGUvXG4gICAgICAgKi9cbiAgICAgIHJlc3VsdHM/OiBEYXRhW107XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxLQUFLLFFBQVEsMEJBQTBCO0FBNkRoRCxPQUFPLE1BQU0sV0FBb0I7RUFDL0IsTUFBTTtFQUNOLFNBQVM7SUFDUCxNQUFNO0VBQ1I7QUFDRixFQUFFO0FBRUYsd0RBQXdELEdBQ3hELGVBQWUsU0FBVSxXQUFxQjtFQUM1QyxNQUFNLFVBQVUsTUFBTSxVQUFVO0VBRWhDLE9BQU8sQ0FBQztJQUNOLElBQUksQ0FBQyxhQUFhLFNBQVMsS0FBSztNQUM5QixNQUFNLE1BQU0sS0FBSyxPQUFPLENBQUMsVUFBVSxHQUFHLGdCQUFnQjtNQUN0RCxRQUFRLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxPQUFpQixDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDO0lBQ2hFO0lBRUEsc0JBQXNCO0lBQ3RCLEtBQUssSUFBSSxDQUFDLFFBQVEsSUFBSSxFQUFFLGdCQUFnQixRQUFRLE9BQU87RUFDekQ7QUFDRjtBQUVBLGdDQUFnQyxHQUNoQyxPQUFPLFNBQVMsZ0JBQWdCLFFBQXlCO0VBQ3ZELE9BQU8sU0FBUyxTQUNkLE9BQVksRUFDWixjQUF3QyxDQUFDLENBQUM7SUFFMUMsTUFBTSxVQUFVLE1BQU0sVUFBVTtJQUNoQyxNQUFNLGVBQWUsUUFBUSxNQUFNO0lBQ25DLE1BQU0sYUFBYSxLQUFLLElBQUksQ0FBQyxRQUFRLE1BQU0sR0FBRyxRQUFRLElBQUk7SUFFMUQsTUFBTSxTQUE4QixFQUFFO0lBQ3RDLElBQUksT0FBTztJQUVYLE1BQU8sRUFBRSxRQUFRLFdBQVk7TUFDM0IsTUFBTSxPQUFPLGVBQWU7TUFDNUIsTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksUUFBUSxJQUFJO01BQ3RDLE1BQU0sS0FBSyxPQUFPLFFBQVEsSUFBSTtNQUM5QixLQUFLLE9BQU8sR0FBRyxRQUFRLEtBQUssQ0FBQyxNQUFNO01BRW5DLElBQUksUUFBUSxJQUFJLEVBQUU7UUFDaEIsUUFBUSxJQUFJLENBQUMsTUFBTTtNQUNyQjtNQUVBLE9BQU8sSUFBSSxDQUFDO0lBQ2Q7SUFFQSxPQUFPO0lBRVAsU0FBUyxlQUFlLElBQVk7TUFDbEMsT0FBTztRQUNMLEtBQUssUUFBUSxHQUFHLENBQUM7UUFDakIsU0FBUyxFQUFFO1FBQ1gsWUFBWTtVQUNWO1VBQ0E7VUFDQTtVQUNBLFVBQVUsT0FBTyxJQUFJLFFBQVEsR0FBRyxDQUFDLE9BQU8sS0FBSztVQUM3QyxNQUFNLGFBQWEsT0FBTyxRQUFRLEdBQUcsQ0FBQyxPQUFPLEtBQUs7UUFDcEQ7TUFDRjtJQUNGO0VBQ0Y7QUFDRiJ9