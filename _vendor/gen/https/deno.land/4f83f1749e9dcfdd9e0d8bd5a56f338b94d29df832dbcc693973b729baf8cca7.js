import { CTOR_KEY } from "../constructor-lock.ts";
import { Comment, Node, NodeType, Text } from "./node.ts";
import { NodeList, nodeListMutatorSym } from "./node-list.ts";
import { Element } from "./element.ts";
import { DocumentFragment } from "./document-fragment.ts";
import { HTMLTemplateElement } from "./elements/html-template-element.ts";
import { getSelectorEngine } from "./selectors/selectors.ts";
import { getElementsByClassName } from "./utils.ts";
import UtilTypes from "./utils-types.ts";
export class DOMImplementation {
  constructor(key){
    if (key !== CTOR_KEY) {
      throw new TypeError("Illegal constructor.");
    }
  }
  createDocument() {
    throw new Error("Unimplemented"); // TODO
  }
  createHTMLDocument(titleStr) {
    titleStr += "";
    const doc = new HTMLDocument(CTOR_KEY);
    const docType = new DocumentType("html", "", "", CTOR_KEY);
    doc.appendChild(docType);
    const html = new Element("html", doc, [], CTOR_KEY);
    html._setOwnerDocument(doc);
    const head = new Element("head", html, [], CTOR_KEY);
    const body = new Element("body", html, [], CTOR_KEY);
    const title = new Element("title", head, [], CTOR_KEY);
    const titleText = new Text(titleStr);
    title.appendChild(titleText);
    doc.head = head;
    doc.body = body;
    return doc;
  }
  createDocumentType(qualifiedName, publicId, systemId) {
    const doctype = new DocumentType(qualifiedName, publicId, systemId, CTOR_KEY);
    return doctype;
  }
}
export class DocumentType extends Node {
  #qualifiedName = "";
  #publicId = "";
  #systemId = "";
  constructor(name, publicId, systemId, key){
    super("html", NodeType.DOCUMENT_TYPE_NODE, null, key);
    this.#qualifiedName = name;
    this.#publicId = publicId;
    this.#systemId = systemId;
  }
  get name() {
    return this.#qualifiedName;
  }
  get publicId() {
    return this.#publicId;
  }
  get systemId() {
    return this.#systemId;
  }
  _shallowClone() {
    return new DocumentType(this.#qualifiedName, this.#publicId, this.#systemId, CTOR_KEY);
  }
}
export class Document extends Node {
  head = null;
  body = null;
  implementation;
  #lockState = false;
  #documentURI = "about:blank";
  #title = "";
  #nwapi = null;
  constructor(){
    super("#document", NodeType.DOCUMENT_NODE, null, CTOR_KEY);
    this.implementation = new DOMImplementation(CTOR_KEY);
  }
  _shallowClone() {
    return new Document();
  }
  // Expose the document's NWAPI for Element's access to
  // querySelector/querySelectorAll
  get _nwapi() {
    return this.#nwapi || (this.#nwapi = getSelectorEngine()(this));
  }
  get documentURI() {
    return this.#documentURI;
  }
  get title() {
    return this.querySelector("title")?.textContent || "";
  }
  get cookie() {
    return ""; // TODO
  }
  set cookie(newCookie) {
  // TODO
  }
  get visibilityState() {
    return "visible";
  }
  get hidden() {
    return false;
  }
  get compatMode() {
    return "CSS1Compat";
  }
  get documentElement() {
    for (const node of this.childNodes){
      if (node.nodeType === NodeType.ELEMENT_NODE) {
        return node;
      }
    }
    return null;
  }
  get doctype() {
    for (const node of this.childNodes){
      if (node.nodeType === NodeType.DOCUMENT_TYPE_NODE) {
        return node;
      }
    }
    return null;
  }
  get childElementCount() {
    let count = 0;
    for (const { nodeType } of this.childNodes){
      if (nodeType === NodeType.ELEMENT_NODE) {
        count++;
      }
    }
    return count;
  }
  appendChild(child) {
    super.appendChild(child);
    child._setOwnerDocument(this);
    return child;
  }
  createElement(tagName, options) {
    tagName = tagName.toUpperCase();
    switch(tagName){
      case "TEMPLATE":
        {
          const frag = new DocumentFragment();
          const elm = new HTMLTemplateElement(null, [], CTOR_KEY, frag);
          elm._setOwnerDocument(this);
          return elm;
        }
      default:
        {
          const elm = new Element(tagName, null, [], CTOR_KEY);
          elm._setOwnerDocument(this);
          return elm;
        }
    }
  }
  createElementNS(namespace, qualifiedName, options) {
    if (namespace === "http://www.w3.org/1999/xhtml") {
      return this.createElement(qualifiedName, options);
    } else {
      throw new Error(`createElementNS: "${namespace}" namespace unimplemented`); // TODO
    }
  }
  createTextNode(data) {
    return new Text(data);
  }
  createComment(data) {
    return new Comment(data);
  }
  createDocumentFragment() {
    const fragment = new DocumentFragment();
    fragment._setOwnerDocument(this);
    return fragment;
  }
  importNode(node, deep = false) {
    const copy = node.cloneNode(deep);
    copy._setOwnerDocument(this);
    return copy;
  }
  adoptNode(node) {
    if (node instanceof Document) {
      throw new DOMException("Adopting a Document node is not supported.", "NotSupportedError");
    }
    node._setParent(null);
    node._setOwnerDocument(this);
    return node;
  }
  // FIXME: This is a bad solution. The correct solution
  // would be to make `.body` and `.head` dynamic getters,
  // but that would be a breaking change since `.body`
  // and `.head` would need to be typed as `Element | null`.
  // Currently they're typed as `Element` which is incorrect...
  cloneNode(deep) {
    const doc = super.cloneNode(deep);
    for (const child of doc.documentElement?.childNodes || []){
      switch(child.nodeName){
        case "BODY":
          {
            doc.body = child;
            break;
          }
        case "HEAD":
          {
            doc.head = child;
            break;
          }
      }
    }
    return doc;
  }
  querySelector(selectors) {
    return this._nwapi.first(selectors, this);
  }
  querySelectorAll(selectors) {
    const nodeList = new NodeList();
    const mutator = nodeList[nodeListMutatorSym]();
    for (const match of this._nwapi.select(selectors, this)){
      mutator.push(match);
    }
    return nodeList;
  }
  // TODO: DRY!!!
  getElementById(id) {
    for (const child of this.childNodes){
      if (child.nodeType === NodeType.ELEMENT_NODE) {
        if (child.id === id) {
          return child;
        }
        const search = child.getElementById(id);
        if (search) {
          return search;
        }
      }
    }
    return null;
  }
  getElementsByTagName(tagName) {
    if (tagName === "*") {
      return this.documentElement ? this._getElementsByTagNameWildcard(this.documentElement, []) : [];
    } else {
      return this._getElementsByTagName(tagName.toUpperCase(), []);
    }
  }
  _getElementsByTagNameWildcard(node, search) {
    for (const child of this.childNodes){
      if (child.nodeType === NodeType.ELEMENT_NODE) {
        search.push(child);
        child._getElementsByTagNameWildcard(search);
      }
    }
    return search;
  }
  _getElementsByTagName(tagName, search) {
    for (const child of this.childNodes){
      if (child.nodeType === NodeType.ELEMENT_NODE) {
        if (child.tagName === tagName) {
          search.push(child);
        }
        child._getElementsByTagName(tagName, search);
      }
    }
    return search;
  }
  getElementsByTagNameNS(_namespace, localName) {
    return this.getElementsByTagName(localName);
  }
  getElementsByClassName(className) {
    return getElementsByClassName(this, className, []);
  }
  hasFocus() {
    return true;
  }
}
export class HTMLDocument extends Document {
  constructor(key){
    if (key !== CTOR_KEY) {
      throw new TypeError("Illegal constructor.");
    }
    super();
  }
  _shallowClone() {
    return new HTMLDocument(CTOR_KEY);
  }
}
UtilTypes.Document = Document;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvZGVub19kb21AdjAuMS40NS9zcmMvZG9tL2RvY3VtZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENUT1JfS0VZIH0gZnJvbSBcIi4uL2NvbnN0cnVjdG9yLWxvY2sudHNcIjtcbmltcG9ydCB7IENvbW1lbnQsIE5vZGUsIE5vZGVUeXBlLCBUZXh0IH0gZnJvbSBcIi4vbm9kZS50c1wiO1xuaW1wb3J0IHsgTm9kZUxpc3QsIG5vZGVMaXN0TXV0YXRvclN5bSB9IGZyb20gXCIuL25vZGUtbGlzdC50c1wiO1xuaW1wb3J0IHsgRWxlbWVudCB9IGZyb20gXCIuL2VsZW1lbnQudHNcIjtcbmltcG9ydCB7IERvY3VtZW50RnJhZ21lbnQgfSBmcm9tIFwiLi9kb2N1bWVudC1mcmFnbWVudC50c1wiO1xuaW1wb3J0IHsgSFRNTFRlbXBsYXRlRWxlbWVudCB9IGZyb20gXCIuL2VsZW1lbnRzL2h0bWwtdGVtcGxhdGUtZWxlbWVudC50c1wiO1xuaW1wb3J0IHsgZ2V0U2VsZWN0b3JFbmdpbmUsIFNlbGVjdG9yQXBpIH0gZnJvbSBcIi4vc2VsZWN0b3JzL3NlbGVjdG9ycy50c1wiO1xuaW1wb3J0IHsgZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSB9IGZyb20gXCIuL3V0aWxzLnRzXCI7XG5pbXBvcnQgVXRpbFR5cGVzIGZyb20gXCIuL3V0aWxzLXR5cGVzLnRzXCI7XG5cbmV4cG9ydCBjbGFzcyBET01JbXBsZW1lbnRhdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGtleTogdHlwZW9mIENUT1JfS0VZKSB7XG4gICAgaWYgKGtleSAhPT0gQ1RPUl9LRVkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGNvbnN0cnVjdG9yLlwiKTtcbiAgICB9XG4gIH1cblxuICBjcmVhdGVEb2N1bWVudCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmltcGxlbWVudGVkXCIpOyAvLyBUT0RPXG4gIH1cblxuICBjcmVhdGVIVE1MRG9jdW1lbnQodGl0bGVTdHI/OiBzdHJpbmcpOiBIVE1MRG9jdW1lbnQge1xuICAgIHRpdGxlU3RyICs9IFwiXCI7XG5cbiAgICBjb25zdCBkb2MgPSBuZXcgSFRNTERvY3VtZW50KENUT1JfS0VZKTtcblxuICAgIGNvbnN0IGRvY1R5cGUgPSBuZXcgRG9jdW1lbnRUeXBlKFwiaHRtbFwiLCBcIlwiLCBcIlwiLCBDVE9SX0tFWSk7XG4gICAgZG9jLmFwcGVuZENoaWxkKGRvY1R5cGUpO1xuXG4gICAgY29uc3QgaHRtbCA9IG5ldyBFbGVtZW50KFwiaHRtbFwiLCBkb2MsIFtdLCBDVE9SX0tFWSk7XG4gICAgaHRtbC5fc2V0T3duZXJEb2N1bWVudChkb2MpO1xuXG4gICAgY29uc3QgaGVhZCA9IG5ldyBFbGVtZW50KFwiaGVhZFwiLCBodG1sLCBbXSwgQ1RPUl9LRVkpO1xuICAgIGNvbnN0IGJvZHkgPSBuZXcgRWxlbWVudChcImJvZHlcIiwgaHRtbCwgW10sIENUT1JfS0VZKTtcblxuICAgIGNvbnN0IHRpdGxlID0gbmV3IEVsZW1lbnQoXCJ0aXRsZVwiLCBoZWFkLCBbXSwgQ1RPUl9LRVkpO1xuICAgIGNvbnN0IHRpdGxlVGV4dCA9IG5ldyBUZXh0KHRpdGxlU3RyKTtcbiAgICB0aXRsZS5hcHBlbmRDaGlsZCh0aXRsZVRleHQpO1xuXG4gICAgZG9jLmhlYWQgPSBoZWFkO1xuICAgIGRvYy5ib2R5ID0gYm9keTtcblxuICAgIHJldHVybiBkb2M7XG4gIH1cblxuICBjcmVhdGVEb2N1bWVudFR5cGUoXG4gICAgcXVhbGlmaWVkTmFtZTogc3RyaW5nLFxuICAgIHB1YmxpY0lkOiBzdHJpbmcsXG4gICAgc3lzdGVtSWQ6IHN0cmluZyxcbiAgKTogRG9jdW1lbnRUeXBlIHtcbiAgICBjb25zdCBkb2N0eXBlID0gbmV3IERvY3VtZW50VHlwZShcbiAgICAgIHF1YWxpZmllZE5hbWUsXG4gICAgICBwdWJsaWNJZCxcbiAgICAgIHN5c3RlbUlkLFxuICAgICAgQ1RPUl9LRVksXG4gICAgKTtcblxuICAgIHJldHVybiBkb2N0eXBlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEb2N1bWVudFR5cGUgZXh0ZW5kcyBOb2RlIHtcbiAgI3F1YWxpZmllZE5hbWUgPSBcIlwiO1xuICAjcHVibGljSWQgPSBcIlwiO1xuICAjc3lzdGVtSWQgPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBwdWJsaWNJZDogc3RyaW5nLFxuICAgIHN5c3RlbUlkOiBzdHJpbmcsXG4gICAga2V5OiB0eXBlb2YgQ1RPUl9LRVksXG4gICkge1xuICAgIHN1cGVyKFxuICAgICAgXCJodG1sXCIsXG4gICAgICBOb2RlVHlwZS5ET0NVTUVOVF9UWVBFX05PREUsXG4gICAgICBudWxsLFxuICAgICAga2V5LFxuICAgICk7XG5cbiAgICB0aGlzLiNxdWFsaWZpZWROYW1lID0gbmFtZTtcbiAgICB0aGlzLiNwdWJsaWNJZCA9IHB1YmxpY0lkO1xuICAgIHRoaXMuI3N5c3RlbUlkID0gc3lzdGVtSWQ7XG4gIH1cblxuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy4jcXVhbGlmaWVkTmFtZTtcbiAgfVxuXG4gIGdldCBwdWJsaWNJZCgpIHtcbiAgICByZXR1cm4gdGhpcy4jcHVibGljSWQ7XG4gIH1cblxuICBnZXQgc3lzdGVtSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3N5c3RlbUlkO1xuICB9XG5cbiAgX3NoYWxsb3dDbG9uZSgpOiBOb2RlIHtcbiAgICByZXR1cm4gbmV3IERvY3VtZW50VHlwZShcbiAgICAgIHRoaXMuI3F1YWxpZmllZE5hbWUsXG4gICAgICB0aGlzLiNwdWJsaWNJZCxcbiAgICAgIHRoaXMuI3N5c3RlbUlkLFxuICAgICAgQ1RPUl9LRVksXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVsZW1lbnRDcmVhdGlvbk9wdGlvbnMge1xuICBpczogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBWaXNpYmlsaXR5U3RhdGUgPSBcInZpc2libGVcIiB8IFwiaGlkZGVuXCIgfCBcInByZXJlbmRlclwiO1xuZXhwb3J0IHR5cGUgTmFtZXNwYWNlVVJJID1cbiAgfCBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIlxuICB8IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICB8IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO1xuXG5leHBvcnQgY2xhc3MgRG9jdW1lbnQgZXh0ZW5kcyBOb2RlIHtcbiAgcHVibGljIGhlYWQ6IEVsZW1lbnQgPSA8RWxlbWVudD4gPHVua25vd24+IG51bGw7XG4gIHB1YmxpYyBib2R5OiBFbGVtZW50ID0gPEVsZW1lbnQ+IDx1bmtub3duPiBudWxsO1xuICBwdWJsaWMgaW1wbGVtZW50YXRpb246IERPTUltcGxlbWVudGF0aW9uO1xuXG4gICNsb2NrU3RhdGUgPSBmYWxzZTtcbiAgI2RvY3VtZW50VVJJID0gXCJhYm91dDpibGFua1wiOyAvLyBUT0RPXG4gICN0aXRsZSA9IFwiXCI7XG4gICNud2FwaTogU2VsZWN0b3JBcGkgfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcbiAgICAgIFwiI2RvY3VtZW50XCIsXG4gICAgICBOb2RlVHlwZS5ET0NVTUVOVF9OT0RFLFxuICAgICAgbnVsbCxcbiAgICAgIENUT1JfS0VZLFxuICAgICk7XG5cbiAgICB0aGlzLmltcGxlbWVudGF0aW9uID0gbmV3IERPTUltcGxlbWVudGF0aW9uKENUT1JfS0VZKTtcbiAgfVxuXG4gIF9zaGFsbG93Q2xvbmUoKTogTm9kZSB7XG4gICAgcmV0dXJuIG5ldyBEb2N1bWVudCgpO1xuICB9XG5cbiAgLy8gRXhwb3NlIHRoZSBkb2N1bWVudCdzIE5XQVBJIGZvciBFbGVtZW50J3MgYWNjZXNzIHRvXG4gIC8vIHF1ZXJ5U2VsZWN0b3IvcXVlcnlTZWxlY3RvckFsbFxuICBnZXQgX253YXBpKCkge1xuICAgIHJldHVybiB0aGlzLiNud2FwaSB8fCAodGhpcy4jbndhcGkgPSBnZXRTZWxlY3RvckVuZ2luZSgpKHRoaXMpKTtcbiAgfVxuXG4gIGdldCBkb2N1bWVudFVSSSgpIHtcbiAgICByZXR1cm4gdGhpcy4jZG9jdW1lbnRVUkk7XG4gIH1cblxuICBnZXQgdGl0bGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvcihcInRpdGxlXCIpPy50ZXh0Q29udGVudCB8fCBcIlwiO1xuICB9XG5cbiAgZ2V0IGNvb2tpZSgpIHtcbiAgICByZXR1cm4gXCJcIjsgLy8gVE9ET1xuICB9XG5cbiAgc2V0IGNvb2tpZShuZXdDb29raWU6IHN0cmluZykge1xuICAgIC8vIFRPRE9cbiAgfVxuXG4gIGdldCB2aXNpYmlsaXR5U3RhdGUoKTogVmlzaWJpbGl0eVN0YXRlIHtcbiAgICByZXR1cm4gXCJ2aXNpYmxlXCI7XG4gIH1cblxuICBnZXQgaGlkZGVuKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGdldCBjb21wYXRNb2RlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiQ1NTMUNvbXBhdFwiO1xuICB9XG5cbiAgZ2V0IGRvY3VtZW50RWxlbWVudCgpOiBFbGVtZW50IHwgbnVsbCB7XG4gICAgZm9yIChjb25zdCBub2RlIG9mIHRoaXMuY2hpbGROb2Rlcykge1xuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5vZGVUeXBlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICByZXR1cm4gPEVsZW1lbnQ+IG5vZGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBnZXQgZG9jdHlwZSgpOiBEb2N1bWVudFR5cGUgfCBudWxsIHtcbiAgICBmb3IgKGNvbnN0IG5vZGUgb2YgdGhpcy5jaGlsZE5vZGVzKSB7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZVR5cGUuRE9DVU1FTlRfVFlQRV9OT0RFKSB7XG4gICAgICAgIHJldHVybiA8RG9jdW1lbnRUeXBlPiBub2RlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZ2V0IGNoaWxkRWxlbWVudENvdW50KCk6IG51bWJlciB7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICBmb3IgKGNvbnN0IHsgbm9kZVR5cGUgfSBvZiB0aGlzLmNoaWxkTm9kZXMpIHtcbiAgICAgIGlmIChub2RlVHlwZSA9PT0gTm9kZVR5cGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb3VudDtcbiAgfVxuXG4gIGFwcGVuZENoaWxkKGNoaWxkOiBOb2RlKTogTm9kZSB7XG4gICAgc3VwZXIuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgIGNoaWxkLl9zZXRPd25lckRvY3VtZW50KHRoaXMpO1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxuXG4gIGNyZWF0ZUVsZW1lbnQodGFnTmFtZTogc3RyaW5nLCBvcHRpb25zPzogRWxlbWVudENyZWF0aW9uT3B0aW9ucyk6IEVsZW1lbnQge1xuICAgIHRhZ05hbWUgPSB0YWdOYW1lLnRvVXBwZXJDYXNlKCk7XG5cbiAgICBzd2l0Y2ggKHRhZ05hbWUpIHtcbiAgICAgIGNhc2UgXCJURU1QTEFURVwiOiB7XG4gICAgICAgIGNvbnN0IGZyYWcgPSBuZXcgRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICBjb25zdCBlbG0gPSBuZXcgSFRNTFRlbXBsYXRlRWxlbWVudChcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIFtdLFxuICAgICAgICAgIENUT1JfS0VZLFxuICAgICAgICAgIGZyYWcsXG4gICAgICAgICk7XG4gICAgICAgIGVsbS5fc2V0T3duZXJEb2N1bWVudCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIGVsbTtcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBjb25zdCBlbG0gPSBuZXcgRWxlbWVudCh0YWdOYW1lLCBudWxsLCBbXSwgQ1RPUl9LRVkpO1xuICAgICAgICBlbG0uX3NldE93bmVyRG9jdW1lbnQodGhpcyk7XG4gICAgICAgIHJldHVybiBlbG07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlRWxlbWVudE5TKFxuICAgIG5hbWVzcGFjZTogTmFtZXNwYWNlVVJJLFxuICAgIHF1YWxpZmllZE5hbWU6IHN0cmluZyxcbiAgICBvcHRpb25zPzogRWxlbWVudENyZWF0aW9uT3B0aW9ucyxcbiAgKTogRWxlbWVudCB7XG4gICAgaWYgKG5hbWVzcGFjZSA9PT0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVsZW1lbnQocXVhbGlmaWVkTmFtZSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYGNyZWF0ZUVsZW1lbnROUzogXCIke25hbWVzcGFjZX1cIiBuYW1lc3BhY2UgdW5pbXBsZW1lbnRlZGAsXG4gICAgICApOyAvLyBUT0RPXG4gICAgfVxuICB9XG5cbiAgY3JlYXRlVGV4dE5vZGUoZGF0YT86IHN0cmluZyk6IFRleHQge1xuICAgIHJldHVybiBuZXcgVGV4dChkYXRhKTtcbiAgfVxuXG4gIGNyZWF0ZUNvbW1lbnQoZGF0YT86IHN0cmluZyk6IENvbW1lbnQge1xuICAgIHJldHVybiBuZXcgQ29tbWVudChkYXRhKTtcbiAgfVxuXG4gIGNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTogRG9jdW1lbnRGcmFnbWVudCB7XG4gICAgY29uc3QgZnJhZ21lbnQgPSBuZXcgRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIGZyYWdtZW50Ll9zZXRPd25lckRvY3VtZW50KHRoaXMpO1xuICAgIHJldHVybiBmcmFnbWVudDtcbiAgfVxuXG4gIGltcG9ydE5vZGUobm9kZTogTm9kZSwgZGVlcDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgY29uc3QgY29weSA9IG5vZGUuY2xvbmVOb2RlKGRlZXApO1xuXG4gICAgY29weS5fc2V0T3duZXJEb2N1bWVudCh0aGlzKTtcblxuICAgIHJldHVybiBjb3B5O1xuICB9XG5cbiAgYWRvcHROb2RlKG5vZGU6IE5vZGUpIHtcbiAgICBpZiAobm9kZSBpbnN0YW5jZW9mIERvY3VtZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKFxuICAgICAgICBcIkFkb3B0aW5nIGEgRG9jdW1lbnQgbm9kZSBpcyBub3Qgc3VwcG9ydGVkLlwiLFxuICAgICAgICBcIk5vdFN1cHBvcnRlZEVycm9yXCIsXG4gICAgICApO1xuICAgIH1cbiAgICBub2RlLl9zZXRQYXJlbnQobnVsbCk7XG4gICAgbm9kZS5fc2V0T3duZXJEb2N1bWVudCh0aGlzKTtcblxuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgLy8gRklYTUU6IFRoaXMgaXMgYSBiYWQgc29sdXRpb24uIFRoZSBjb3JyZWN0IHNvbHV0aW9uXG4gIC8vIHdvdWxkIGJlIHRvIG1ha2UgYC5ib2R5YCBhbmQgYC5oZWFkYCBkeW5hbWljIGdldHRlcnMsXG4gIC8vIGJ1dCB0aGF0IHdvdWxkIGJlIGEgYnJlYWtpbmcgY2hhbmdlIHNpbmNlIGAuYm9keWBcbiAgLy8gYW5kIGAuaGVhZGAgd291bGQgbmVlZCB0byBiZSB0eXBlZCBhcyBgRWxlbWVudCB8IG51bGxgLlxuICAvLyBDdXJyZW50bHkgdGhleSdyZSB0eXBlZCBhcyBgRWxlbWVudGAgd2hpY2ggaXMgaW5jb3JyZWN0Li4uXG4gIGNsb25lTm9kZShkZWVwPzogYm9vbGVhbik6IERvY3VtZW50IHtcbiAgICBjb25zdCBkb2MgPSBzdXBlci5jbG9uZU5vZGUoZGVlcCkgYXMgRG9jdW1lbnQ7XG5cbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGRvYy5kb2N1bWVudEVsZW1lbnQ/LmNoaWxkTm9kZXMgfHwgW10pIHtcbiAgICAgIHN3aXRjaCAoY2hpbGQubm9kZU5hbWUpIHtcbiAgICAgICAgY2FzZSBcIkJPRFlcIjoge1xuICAgICAgICAgIGRvYy5ib2R5ID0gY2hpbGQgYXMgRWxlbWVudDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgXCJIRUFEXCI6IHtcbiAgICAgICAgICBkb2MuaGVhZCA9IGNoaWxkIGFzIEVsZW1lbnQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZG9jO1xuICB9XG5cbiAgcXVlcnlTZWxlY3RvcihzZWxlY3RvcnM6IHN0cmluZyk6IEVsZW1lbnQgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5fbndhcGkuZmlyc3Qoc2VsZWN0b3JzLCB0aGlzKTtcbiAgfVxuXG4gIHF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3JzOiBzdHJpbmcpOiBOb2RlTGlzdCB7XG4gICAgY29uc3Qgbm9kZUxpc3QgPSBuZXcgTm9kZUxpc3QoKTtcbiAgICBjb25zdCBtdXRhdG9yID0gbm9kZUxpc3Rbbm9kZUxpc3RNdXRhdG9yU3ltXSgpO1xuXG4gICAgZm9yIChjb25zdCBtYXRjaCBvZiB0aGlzLl9ud2FwaS5zZWxlY3Qoc2VsZWN0b3JzLCB0aGlzKSkge1xuICAgICAgbXV0YXRvci5wdXNoKG1hdGNoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZUxpc3Q7XG4gIH1cblxuICAvLyBUT0RPOiBEUlkhISFcbiAgZ2V0RWxlbWVudEJ5SWQoaWQ6IHN0cmluZyk6IEVsZW1lbnQgfCBudWxsIHtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGROb2Rlcykge1xuICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSBOb2RlVHlwZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgaWYgKCg8RWxlbWVudD4gY2hpbGQpLmlkID09PSBpZCkge1xuICAgICAgICAgIHJldHVybiA8RWxlbWVudD4gY2hpbGQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzZWFyY2ggPSAoPEVsZW1lbnQ+IGNoaWxkKS5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgICAgIGlmIChzZWFyY2gpIHtcbiAgICAgICAgICByZXR1cm4gc2VhcmNoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBnZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lOiBzdHJpbmcpOiBFbGVtZW50W10ge1xuICAgIGlmICh0YWdOYW1lID09PSBcIipcIikge1xuICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRFbGVtZW50XG4gICAgICAgID8gPEVsZW1lbnRbXT4gdGhpcy5fZ2V0RWxlbWVudHNCeVRhZ05hbWVXaWxkY2FyZChcbiAgICAgICAgICB0aGlzLmRvY3VtZW50RWxlbWVudCxcbiAgICAgICAgICBbXSxcbiAgICAgICAgKVxuICAgICAgICA6IFtdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gPEVsZW1lbnRbXT4gdGhpcy5fZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZS50b1VwcGVyQ2FzZSgpLCBbXSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfZ2V0RWxlbWVudHNCeVRhZ05hbWVXaWxkY2FyZChub2RlOiBOb2RlLCBzZWFyY2g6IE5vZGVbXSk6IE5vZGVbXSB7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLmNoaWxkTm9kZXMpIHtcbiAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gTm9kZVR5cGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIHNlYXJjaC5wdXNoKGNoaWxkKTtcbiAgICAgICAgKDxhbnk+IGNoaWxkKS5fZ2V0RWxlbWVudHNCeVRhZ05hbWVXaWxkY2FyZChzZWFyY2gpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzZWFyY2g7XG4gIH1cblxuICBwcml2YXRlIF9nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lOiBzdHJpbmcsIHNlYXJjaDogTm9kZVtdKTogTm9kZVtdIHtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGROb2Rlcykge1xuICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSBOb2RlVHlwZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgaWYgKCg8RWxlbWVudD4gY2hpbGQpLnRhZ05hbWUgPT09IHRhZ05hbWUpIHtcbiAgICAgICAgICBzZWFyY2gucHVzaChjaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICAoPGFueT4gY2hpbGQpLl9nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lLCBzZWFyY2gpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzZWFyY2g7XG4gIH1cblxuICBnZXRFbGVtZW50c0J5VGFnTmFtZU5TKF9uYW1lc3BhY2U6IHN0cmluZywgbG9jYWxOYW1lOiBzdHJpbmcpOiBFbGVtZW50W10ge1xuICAgIHJldHVybiB0aGlzLmdldEVsZW1lbnRzQnlUYWdOYW1lKGxvY2FsTmFtZSk7XG4gIH1cblxuICBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGNsYXNzTmFtZTogc3RyaW5nKTogRWxlbWVudFtdIHtcbiAgICByZXR1cm4gPEVsZW1lbnRbXT4gZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSh0aGlzLCBjbGFzc05hbWUsIFtdKTtcbiAgfVxuXG4gIGhhc0ZvY3VzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBIVE1MRG9jdW1lbnQgZXh0ZW5kcyBEb2N1bWVudCB7XG4gIGNvbnN0cnVjdG9yKGtleTogdHlwZW9mIENUT1JfS0VZKSB7XG4gICAgaWYgKGtleSAhPT0gQ1RPUl9LRVkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGNvbnN0cnVjdG9yLlwiKTtcbiAgICB9XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIF9zaGFsbG93Q2xvbmUoKTogTm9kZSB7XG4gICAgcmV0dXJuIG5ldyBIVE1MRG9jdW1lbnQoQ1RPUl9LRVkpO1xuICB9XG59XG5cblV0aWxUeXBlcy5Eb2N1bWVudCA9IERvY3VtZW50O1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsUUFBUSxRQUFRLHlCQUF5QjtBQUNsRCxTQUFTLE9BQU8sRUFBRSxJQUFJLEVBQUUsUUFB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