// Ported from js-yaml v3.13.1:
// https://github.com/nodeca/js-yaml/commit/665aadda42349dcae869f12040d9b10ef18d12da
// Copyright 2011-2015 by Vitaly Puzrin. All rights reserved. MIT license.
// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// deno-lint-ignore no-explicit-any
export function isNothing(subject) {
  return typeof subject === "undefined" || subject === null;
}
export function isArray(value) {
  return Array.isArray(value);
}
export function isBoolean(value) {
  return typeof value === "boolean" || value instanceof Boolean;
}
export function isNull(value) {
  return value === null;
}
export function isNumber(value) {
  return typeof value === "number" || value instanceof Number;
}
export function isString(value) {
  return typeof value === "string" || value instanceof String;
}
export function isSymbol(value) {
  return typeof value === "symbol";
}
export function isUndefined(value) {
  return value === undefined;
}
export function isObject(value) {
  return value !== null && typeof value === "object";
}
export function isError(e) {
  return e instanceof Error;
}
export function isFunction(value) {
  return typeof value === "function";
}
export function isRegExp(value) {
  return value instanceof RegExp;
}
export function toArray(sequence) {
  if (isArray(sequence)) return sequence;
  if (isNothing(sequence)) return [];
  return [
    sequence
  ];
}
export function repeat(str, count) {
  let result = "";
  for(let cycle = 0; cycle < count; cycle++){
    result += str;
  }
  return result;
}
export function isNegativeZero(i) {
  return i === 0 && Number.NEGATIVE_INFINITY === 1 / i;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0BzdGQveWFtbC8wLjIyNC4wL191dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQb3J0ZWQgZnJvbSBqcy15YW1sIHYzLjEzLjE6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWNhL2pzLXlhbWwvY29tbWl0LzY2NWFhZGRhNDIzNDlkY2FlODY5ZjEyMDQwZDliMTBlZjE4ZDEyZGFcbi8vIENvcHlyaWdodCAyMDExLTIwMTUgYnkgVml0YWx5IFB1enJpbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG4vLyBDb3B5cmlnaHQgMjAxOC0yMDI0IHRoZSBEZW5vIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIE1JVCBsaWNlbnNlLlxuXG4vLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuZXhwb3J0IHR5cGUgQW55ID0gYW55O1xuXG5leHBvcnQgZnVuY3Rpb24gaXNOb3RoaW5nKHN1YmplY3Q6IHVua25vd24pOiBzdWJqZWN0IGlzIG5ldmVyIHtcbiAgcmV0dXJuIHR5cGVvZiBzdWJqZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8IHN1YmplY3QgPT09IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FycmF5KHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgQW55W10ge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBib29sZWFuIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIgfHwgdmFsdWUgaW5zdGFuY2VvZiBCb29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdWxsKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgbnVsbCB7XG4gIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgbnVtYmVyIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCB2YWx1ZSBpbnN0YW5jZW9mIE51bWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgc3RyaW5nIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgc3ltYm9sIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzeW1ib2xcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIFJlY29yZDxzdHJpbmcsIHVua25vd24+IHtcbiAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRXJyb3IoZTogdW5rbm93bik6IGJvb2xlYW4ge1xuICByZXR1cm4gZSBpbnN0YW5jZW9mIEVycm9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzICgpID0+IHZvaWQge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1JlZ0V4cCh2YWx1ZTogdW5rbm93bik6IHZhbHVlIGlzIFJlZ0V4cCB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvQXJyYXk8VD4oc2VxdWVuY2U6IFQpOiBUIHwgW10gfCBbVF0ge1xuICBpZiAoaXNBcnJheShzZXF1ZW5jZSkpIHJldHVybiBzZXF1ZW5jZTtcbiAgaWYgKGlzTm90aGluZyhzZXF1ZW5jZSkpIHJldHVybiBbXTtcblxuICByZXR1cm4gW3NlcXVlbmNlXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlcGVhdChzdHI6IHN0cmluZywgY291bnQ6IG51bWJlcik6IHN0cmluZyB7XG4gIGxldCByZXN1bHQgPSBcIlwiO1xuXG4gIGZvciAobGV0IGN5Y2xlID0gMDsgY3ljbGUgPCBjb3VudDsgY3ljbGUrKykge1xuICAgIHJlc3VsdCArPSBzdHI7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOZWdhdGl2ZVplcm8oaTogbnVtYmVyKTogYm9vbGVhbiB7XG4gIHJldHVybiBpID09PSAwICYmIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSA9PT0gMSAvIGk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXJyYXlPYmplY3Q8VCA9IEFueT4ge1xuICBbUDogc3RyaW5nXTogVDtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwrQkFBK0I7QUFDL0Isb0ZBQW9GO0FBQ3BGLDBFQUEwRTtBQUMxRSwwRUFBMEU7QUFFMUUsbUNBQW1DO0FBR25DLE9BQU8sU0FBUyxVQUFVLE9BQWdCO0VBQ3hDLE9BQU8sT0FBTyxZQUFZLGVBQWUsWUFBWTtBQUN2RDtBQUVBLE9BQU8sU0FBUyxRQUFRLEtBQWM7RUFDcEMsT0FBTyxNQUFNLE9BQU8sQ0FBQztBQUN2QjtBQUVBLE9BQU8sU0FBUyxVQUFVLEtBQWM7RUFDdEMsT0FBTyxPQUFPLFVBQVUsYUFBYSxpQkFBaUI7QUFDeEQ7QUFFQSxPQUFPLFNBQVMsT0FBTyxLQUFjO0VBQ25DLE9BQU8sVUFBVTtBQUNuQjtBQUVBLE9BQU8sU0FBUyxTQUFTLEtBQWM7RUFDckMsT0FBTyxPQUFPLFVBQVUsWUFBWSxpQkFBaUI7QUFDdkQ7QUFFQSxPQUFPLFNBQVMsU0FBUyxLQUFjO0VBQ3JDLE9BQU8sT0FBTyxVQUFVLFlBQVksaUJBQWlCO0FBQ3ZEO0FBRUEsT0FBTyxTQUFTLFNBQVMsS0FBYztFQUNyQyxPQUFPLE9BQU8sVUFBVTtBQUMxQjtBQUVBLE9BQU8sU0FBUyxZQUFZLEtBQWM7RUFDeEMsT0FBTyxVQUFVO0FBQ25CO0FBRUEsT0FBTyxTQUFTLFNBQVMsS0FBYztFQUNyQyxPQUFPLFVBQVUsUUFBUSxPQUFPLFVBQVU7QUFDNUM7QUFFQSxPQUFPLFNBQVMsUUFBUSxDQUFVO0VBQ2hDLE9BQU8sYUFBYTtBQUN0QjtBQUVBLE9BQU8sU0FBUyxXQUFXLEtBQWM7RUFDdkMsT0FBTyxPQUFPLFVBQVU7QUFDMUI7QUFFQSxPQUFPLFNBQVMsU0FBUyxLQUFjO0VBQ3JDLE9BQU8saUJBQWlCO0FBQzFCO0FBRUEsT0FBTyxTQUFTLFFBQVcsUUFBVztFQUNwQyxJQUFJLFFBQVEsV0FBVyxPQUFPO0VBQzlCLElBQUksVUFBVSxXQUFXLE9BQU8sRUFBRTtFQUVsQyxPQUFPO0lBQUM7R0FBUztBQUNuQjtBQUVBLE9BQU8sU0FBUyxPQUFPLEdBQVcsRUFBRSxLQUFhO0VBQy9DLElBQUksU0FBUztFQUViLElBQUssSUFBSSxRQUFRLEdBQUcsUUFBUSxPQUFPLFFBQVM7SUFDMUMsVUFBVTtFQUNaO0VBRUEsT0FBTztBQUNUO0FBRUEsT0FBTyxTQUFTLGVBQWUsQ0FBUztFQUN0QyxPQUFPLE1BQU0sS0FBSyxPQUFPLGlCQUFpQixLQUFLLElBQUk7QUFDckQifQ==