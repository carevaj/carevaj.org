import { merge } from "../core/utils/object.ts";
import { posix } from "../deps/path.ts";
import { Page } from "../core/file.ts";
import { pagefind } from "../deps/pagefind.ts";
export const defaults = {
  outputPath: "/pagefind",
  ui: {
    containerId: "search",
    showImages: false,
    excerptLength: 0,
    showEmptyFilters: true,
    showSubResults: false,
    resetStyles: true
  },
  indexing: {
    rootSelector: "html",
    verbose: false,
    excludeSelectors: []
  }
};
/** A plugin to generate a static full text search engine */ export default function(userOptions) {
  const options = merge(defaults, userOptions);
  return (site)=>{
    site.process([
      ".html"
    ], async (pages, allPages)=>{
      const { index } = await pagefind.createIndex(options.indexing);
      if (!index) {
        throw new Error("Pagefind index not created");
      }
      // Page indexing
      for (const page of pages){
        const { errors } = await index.addHTMLFile({
          url: page.data.url,
          content: page.content
        });
        if (errors.length > 0) {
          throw new Error(`Pagefind index errors for ${page.src.path}:\n${errors.join("\n")}`);
        }
      }
      if (options.customRecords) {
        for (const record of options.customRecords){
          const { errors } = await index.addCustomRecord(record);
          if (errors.length > 0) {
            throw new Error(`Pagefind index errors for custom record:\n${errors.join("\n")}`);
          }
        }
      }
      // Output indexing
      const { files } = await index.getFiles();
      const textDecoder = new TextDecoder();
      const textExtensions = [
        ".js",
        ".css",
        ".json"
      ];
      for (const file of files){
        const { path } = file;
        const content = textExtensions.includes(posix.extname(path)) ? textDecoder.decode(file.content) : file.content;
        allPages.push(Page.create({
          url: posix.join("/", options.outputPath, path),
          content
        }));
      }
      // Cleanup
      await index.deleteIndex();
      await pagefind.close();
    });
    if (options.ui) {
      const { containerId, ...ui } = options.ui;
      site.process([
        ".html"
      ], (pages)=>{
        for (const page of pages){
          const { document } = page;
          if (!document) {
            continue;
          }
          const container = document.getElementById(containerId);
          // Insert UI styles and scripts
          if (container) {
            const styles = document.createElement("link");
            styles.setAttribute("rel", "stylesheet");
            styles.setAttribute("href", site.url(`${posix.join(options.outputPath, "pagefind-ui.css")}`));
            // Insert before other styles to allow overriding
            const first = document.head.querySelector("link[rel=stylesheet],style");
            if (first) {
              document.head.insertBefore(styles, first);
            } else {
              document.head.append(styles);
            }
            const script = document.createElement("script");
            script.setAttribute("type", "text/javascript");
            script.setAttribute("src", site.url(`${posix.join(options.outputPath, "pagefind-ui.js")}`));
            document.head.append(script);
            const uiSettings = {
              element: `#${containerId}`,
              ...ui,
              bundlePath: site.url(posix.join(options.outputPath, "/")),
              baseUrl: site.url("/"),
              processTerm: ui.processTerm ? ui.processTerm.toString() : undefined,
              processResult: ui.processResult ? ui.processResult.toString() : undefined
            };
            const init = document.createElement("script");
            init.setAttribute("type", "text/javascript");
            init.innerHTML = `window.addEventListener('DOMContentLoaded',()=>{new PagefindUI(${JSON.stringify(uiSettings)});});`;
            document.head.append(init);
            if (ui.highlightParam) {
              const highlightScript = document.createElement("script");
              highlightScript.setAttribute("type", "module");
              highlightScript.innerHTML = `
              import "${site.url(`${posix.join(options.outputPath, "pagefind-highlight.js")}`)}";
              new PagefindHighlight({ highlightParam: ${JSON.stringify(ui.highlightParam)} });
              `;
              document.head.append(highlightScript);
            }
          }
        }
      });
    }
  };
}
//# sourceMappingURL=data:application/json;base64,