import { posix } from "../deps/path.ts";
import { normalizePath } from "./utils/path.ts";
import { mergeData } from "./utils/merge_data.ts";
import { parseDateFromFilename } from "./utils/date.ts";
import { getPageUrl } from "./utils/page_url.ts";
import { getPageDate } from "./utils/page_date.ts";
import { Page } from "./file.ts";
/**
 * Scan and load files from the source folder
 * with the data, pages, assets and static files
 */ export default class Source {
  /** Filesystem reader to scan folders */ fs;
  /** To load all _data files */ dataLoader;
  /** To load all components */ componentLoader;
  /** Info about how to handle different file formats */ formats;
  /** The list of paths to ignore */ ignored = new Set();
  /** The path filters to ignore */ filters = [];
  /** The data assigned per path */ scopedData;
  /** The pages assigned per path */ scopedPages;
  /** The components assigned per path */ scopedComponents;
  /** Use pretty URLs */ prettyUrls;
  /** List of static files and folders to copy */ staticPaths = new Map();
  /** List of static files and folders to copy */ copyRemainingFiles;
  /** Extra code generated by the components */ extraCode = new Map();
  components;
  /** The data assigned per path */ data = new Map();
  constructor(options){
    this.dataLoader = options.dataLoader;
    this.componentLoader = options.componentLoader;
    this.fs = options.fs;
    this.formats = options.formats;
    this.components = options.components;
    this.scopedData = options.scopedData;
    this.scopedPages = options.scopedPages;
    this.scopedComponents = options.scopedComponents;
    this.prettyUrls = options.prettyUrls;
  }
  addIgnoredPath(path) {
    this.ignored.add(normalizePath(path));
  }
  addIgnoreFilter(filter) {
    this.filters.push(filter);
  }
  addStaticPath(from, to) {
    this.staticPaths.set(normalizePath(from.replace(/\/$/, "")), {
      dest: typeof to === "string" ? normalizePath(to) : to,
      dirOnly: from.endsWith("/")
    });
  }
  async build(...buildFilters) {
    const pages = [];
    const staticFiles = [];
    await this.#build(buildFilters, this.fs.entries.get("/"), "/", new Map(), {}, pages, staticFiles);
    return [
      pages,
      staticFiles
    ];
  }
  async #build(buildFilters, dir, path, parentComponents, parentData, pages, staticFiles) {
    if (buildFilters.some((filter)=>!filter(dir))) {
      return;
    }
    // Parse the date/time in the folder name
    const [basename, date] = parseDateFromFilename(dir.name);
    // Load the _data files
    const dirDatas = [];
    for (const entry of dir.children.values()){
      if (entry.type === "file" && entry.name.startsWith("_data.") || entry.type === "directory" && entry.name === "_data") {
        const loaded = await this.dataLoader.load(entry);
        if (loaded) {
          dirDatas.push(loaded);
        }
      }
    }
    if (date) {
      dirDatas.push({
        date
      });
    }
    // Merge directory data
    const dirData = mergeData(parentData, {
      basename
    }, this.scopedData.get(dir.path) || {}, ...dirDatas);
    path = posix.join(path, dirData.basename);
    // Directory components
    const scopedComponents = this.scopedComponents.get(dir.path);
    let loadedComponents;
    // Load _components files
    for (const entry of dir.children.values()){
      if (entry.type === "directory" && entry.name === "_components") {
        loadedComponents = await this.componentLoader.load(entry, dirData);
        break;
      }
    }
    // Merge the components
    if (scopedComponents || loadedComponents) {
      parentComponents = mergeComponents(parentComponents, scopedComponents || new Map(), loadedComponents || new Map());
      dirData[this.components.variable] = toProxy(parentComponents, this.extraCode);
    }
    // Store the root data to be used by other plugins
    this.data.set(path, dirData);
    // Load the pages assigned to the current path
    if (this.scopedPages.has(dir.path)) {
      for (const data of this.scopedPages.get(dir.path)){
        const basename = posix.basename(data.url).replace(/\.[\w.]+$/, "");
        const page = new Page();
        page.data = mergeData(dirData, {
          basename,
          date: new Date()
        }, data);
        const url = getPageUrl(page, this.prettyUrls, path);
        if (!url) {
          continue;
        }
        page.data.url = url;
        page.data.date = getPageDate(page);
        page.data.page = page;
        pages.push(page);
      }
    }
    // Load the pages and static files
    for (const entry of dir.children.values()){
      if (buildFilters.some((filter)=>!filter(entry))) {
        continue;
      }
      // Static files
      if (this.staticPaths.has(entry.path)) {
        const { dest, dirOnly } = this.staticPaths.get(entry.path);
        staticFiles.push(...this.#getStaticFiles(path, entry, dest, dirOnly));
        continue;
      }
      // Check if the entry should be ignored
      if (entry.name.startsWith(".") && !isWellKnownDir(entry) || entry.name.startsWith("_") || this.ignored.has(entry.path)) {
        for (const [staticSrc, { dest, dirOnly }] of this.staticPaths){
          if (staticSrc.startsWith(entry.path)) {
            const staticEntry = this.fs.entries.get(staticSrc);
            const staticPath = posix.dirname(posix.join(path, staticEntry.path.slice(entry.path.length)));
            staticFiles.push(...this.#getStaticFiles(staticPath, staticEntry, dest, dirOnly));
          }
        }
        continue;
      }
      if (this.filters.some((filter)=>filter(entry.path))) {
        continue;
      }
      if (entry.type === "file") {
        const format = this.formats.search(entry.path);
        // Unknown file format
        if (!format) {
          // Remaining files
          if (this.copyRemainingFiles) {
            const dest = this.copyRemainingFiles(entry.path);
            if (dest) {
              staticFiles.push(...this.#getStaticFiles(path, entry, typeof dest === "string" ? dest : undefined));
            }
          }
          continue;
        }
        // The file is a static file
        if (format.copy) {
          staticFiles.push(...this.#getStaticFiles(path, entry, typeof format.copy === "function" ? format.copy : undefined));
          continue;
        }
        // The file is a page
        if (format.pageType) {
          const loader = format.pageType === "asset" ? format.assetLoader : format.loader;
          if (!loader) {
            throw new Error(`Missing loader for ${format.pageType} page type (${entry.path}))`);
          }
          const { ext } = format;
          const [basename, date] = parseDateFromFilename(entry.name);
          // Create the page
          const page = new Page({
            path: entry.path.slice(0, -ext.length),
            ext,
            asset: format.pageType === "asset",
            entry
          });
          // Load and merge the page data
          const pageData = await entry.getContent(loader);
          page.data = mergeData(dirData, {
            basename: basename.slice(0, -ext.length)
          }, date ? {
            date
          } : {}, this.scopedData.get(entry.path) || {}, pageData);
          const url = getPageUrl(page, this.prettyUrls, path);
          if (!url) {
            continue;
          }
          page.data.url = url;
          page.data.date = getPageDate(page);
          page.data.page = page;
          page._data.layout = pageData.layout;
          if (buildFilters.some((filter)=>!filter(entry, page))) {
            continue;
          }
          pages.push(page);
          continue;
        }
      }
      // Load recursively the directory
      if (entry.type === "directory") {
        await this.#build(buildFilters, entry, path, parentComponents, dirData, pages, staticFiles);
      }
    }
    return [
      pages,
      staticFiles
    ];
  }
  /** Returns the pages with extra code generated by the components */ getComponentsExtraCode() {
    const files = {
      css: this.components.cssFile,
      js: this.components.jsFile
    };
    const pages = [];
    for (const [type, path] of Object.entries(files)){
      const code = this.extraCode.get(type);
      if (code && code.size) {
        pages.push(Page.create({
          url: path,
          content: Array.from(code.values()).join("\n")
        }));
      }
    }
    return pages;
  }
  /** Scan the static files in a directory */ *#scanStaticFiles(dirEntry, destPath, destFn) {
    for (const entry of dirEntry.children.values()){
      if (entry.type === "file") {
        if (entry.name.startsWith(".") || entry.name.startsWith("_")) {
          continue;
        }
        // Check if the file should be ignored
        if (this.ignored.has(entry.path)) {
          continue;
        }
        if (this.filters.some((filter)=>filter(entry.path))) {
          continue;
        }
        const outputPath = getOutputPath(entry, destPath, destFn);
        yield {
          entry,
          outputPath
        };
      }
      if (entry.type === "directory") {
        yield* this.#scanStaticFiles(entry, posix.join(destPath, entry.name), destFn);
      }
    }
  }
  #getStaticFiles(path, entry, dest, dirOnly = false) {
    if (entry.type === "file") {
      if (!dirOnly) {
        return [
          {
            entry,
            outputPath: getOutputPath(entry, path, dest)
          }
        ];
      }
      return [];
    }
    return Array.from(this.#scanStaticFiles(entry, typeof dest === "string" ? dest : posix.join(path, entry.name), typeof dest === "function" ? dest : undefined));
  }
}
/**
 * Create and returns a proxy to use the components
 * as comp.name() instead of components.get("name").render()
 */ function toProxy(components, extraCode) {
  const node = {
    _components: components,
    _proxies: new Map()
  };
  return new Proxy(node, {
    get: (target, name)=>{
      if (typeof name !== "string" || name in target) {
        return;
      }
      const key = name.toLowerCase();
      if (target._proxies.has(key)) {
        return target._proxies.get(key);
      }
      const component = target._components.get(key);
      if (!component) {
        throw new Error(`Component "${name}" not found`);
      }
      if (component instanceof Map) {
        const proxy = toProxy(component, extraCode);
        target._proxies.set(key, proxy);
        return proxy;
      }
      // Save CSS & JS code for the component
      if (extraCode) {
        if (component.css) {
          const code = extraCode.get("css") ?? new Map();
          code.set(key, component.css);
          extraCode.set("css", code);
        }
        if (component.js) {
          const code = extraCode.get("js") ?? new Map();
          code.set(key, component.js);
          extraCode.set("js", code);
        }
      }
      // Return the function to render the component
      return (props)=>component.render(props);
    }
  });
}
/** Merge the cascade components */ function mergeComponents(...components) {
  return components.reduce((previous, current)=>{
    const components = new Map(previous);
    for (const [key, value] of current){
      if (components.has(key)) {
        const previousValue = components.get(key);
        if (previousValue instanceof Map && value instanceof Map) {
          components.set(key, mergeComponents(value, previousValue));
        } else {
          components.set(key, value);
        }
      } else {
        components.set(key, value);
      }
    }
    return components;
  });
}
function getOutputPath(entry, path, dest) {
  if (typeof dest === "function") {
    return dest(posix.join(path, entry.name));
  }
  if (typeof dest === "string") {
    return dest;
  }
  return posix.join(path, entry.name);
}
function isWellKnownDir(entry) {
  return entry.type === "directory" && entry.path === "/.well-known";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvbHVtZUB2Mi4yLjAvY29yZS9zb3VyY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcG9zaXggfSBmcm9tIFwiLi4vZGVwcy9wYXRoLnRzXCI7XG5pbXBvcnQgeyBub3JtYWxpemVQYXRoIH0gZnJvbSBcIi4vdXRpbHMvcGF0aC50c1wiO1xuaW1wb3J0IHsgbWVyZ2VEYXRhIH0gZnJvbSBcIi4vdXRpbHMvbWVyZ2VfZGF0YS50c1wiO1xuaW1wb3J0IHsgcGFyc2VEYXRlRnJvbUZpbGVuYW1lIH0gZnJvbSBcIi4vdXRpbHMvZGF0ZS50c1wiO1xuaW1wb3J0IHsgZ2V0UGFnZVVybCB9IGZyb20gXCIuL3V0aWxzL3BhZ2VfdXJsLnRzXCI7XG5pbXBvcnQgeyBnZXRQYWdlRGF0ZSB9IGZyb20gXCIuL3V0aWxzL3BhZ2VfZGF0ZS50c1wiO1xuaW1wb3J0IHsgUGFnZSwgU3RhdGljRmlsZSB9IGZyb20gXCIuL2ZpbGUudHNcIjtcblxuaW1wb3J0IHR5cGUgeyBEYXRhLCBSYXdEYXRhIH0gZnJvbSBcIi4vZmlsZS50c1wiO1xuaW1wb3J0IHR5cGUgeyBkZWZhdWx0IGFzIEZTLCBFbnRyeSB9IGZyb20gXCIuL2ZzLnRzXCI7XG5pbXBvcnQgdHlwZSBGb3JtYXRzIGZyb20gXCIuL2Zvcm1hdHMudHNcIjtcbmltcG9ydCB0eXBlIERhdGFMb2FkZXIgZnJvbSBcIi4vZGF0YV9sb2FkZXIudHNcIjtcbmltcG9ydCB0eXBlIHsgU2NvcGVGaWx0ZXIgfSBmcm9tIFwiLi9zY29wZXMudHNcIjtcbmltcG9ydCB0eXBlIHtcbiAgQ29tcG9uZW50cyxcbiAgZGVmYXVsdCBhcyBDb21wb25lbnRMb2FkZXIsXG59IGZyb20gXCIuL2NvbXBvbmVudF9sb2FkZXIudHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBPcHRpb25zIHtcbiAgZm9ybWF0czogRm9ybWF0cztcbiAgZGF0YUxvYWRlcjogRGF0YUxvYWRlcjtcbiAgY29tcG9uZW50TG9hZGVyOiBDb21wb25lbnRMb2FkZXI7XG4gIHNjb3BlZERhdGE6IE1hcDxzdHJpbmcsIFJhd0RhdGE+O1xuICBzY29wZWRQYWdlczogTWFwPHN0cmluZywgUmF3RGF0YVtdPjtcbiAgc2NvcGVkQ29tcG9uZW50czogTWFwPHN0cmluZywgQ29tcG9uZW50cz47XG4gIGZzOiBGUztcbiAgcHJldHR5VXJsczogYm9vbGVhbjtcbiAgY29tcG9uZW50czoge1xuICAgIHZhcmlhYmxlOiBzdHJpbmc7XG4gICAgY3NzRmlsZTogc3RyaW5nO1xuICAgIGpzRmlsZTogc3RyaW5nO1xuICB9O1xufVxuXG4vKipcbiAqIFNjYW4gYW5kIGxvYWQgZmlsZXMgZnJvbSB0aGUgc291cmNlIGZvbGRlclxuICogd2l0aCB0aGUgZGF0YSwgcGFnZXMsIGFzc2V0cyBhbmQgc3RhdGljIGZpbGVzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvdXJjZSB7XG4gIC8qKiBGaWxlc3lzdGVtIHJlYWRlciB0byBzY2FuIGZvbGRlcnMgKi9cbiAgZnM6IEZTO1xuXG4gIC8qKiBUbyBsb2FkIGFsbCBfZGF0YSBmaWxlcyAqL1xuICBkYXRhTG9hZGVyOiBEYXRhTG9hZGVyO1xuXG4gIC8qKiBUbyBsb2FkIGFsbCBjb21wb25lbnRzICovXG4gIGNvbXBvbmVudExvYWRlcjogQ29tcG9uZW50TG9hZGVyO1xuXG4gIC8qKiBJbmZvIGFib3V0IGhvdyB0byBoYW5kbGUgZGlmZmVyZW50IGZpbGUgZm9ybWF0cyAqL1xuICBmb3JtYXRzOiBGb3JtYXRzO1xuXG4gIC8qKiBUaGUgbGlzdCBvZiBwYXRocyB0byBpZ25vcmUgKi9cbiAgaWdub3JlZCA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuXG4gIC8qKiBUaGUgcGF0aCBmaWx0ZXJzIHRvIGlnbm9yZSAqL1xuICBmaWx0ZXJzOiBTY29wZUZpbHRlcltdID0gW107XG5cbiAgLyoqIFRoZSBkYXRhIGFzc2lnbmVkIHBlciBwYXRoICovXG4gIHNjb3BlZERhdGE6IE1hcDxzdHJpbmcsIFJhd0RhdGE+O1xuXG4gIC8qKiBUaGUgcGFnZXMgYXNzaWduZWQgcGVyIHBhdGggKi9cbiAgc2NvcGVkUGFnZXM6IE1hcDxzdHJpbmcsIFJhd0RhdGFbXT47XG5cbiAgLyoqIFRoZSBjb21wb25lbnRzIGFzc2lnbmVkIHBlciBwYXRoICovXG4gIHNjb3BlZENvbXBvbmVudHM6IE1hcDxzdHJpbmcsIENvbXBvbmVudHM+O1xuXG4gIC8qKiBVc2UgcHJldHR5IFVSTHMgKi9cbiAgcHJldHR5VXJsczogYm9vbGVhbjtcblxuICAvKiogTGlzdCBvZiBzdGF0aWMgZmlsZXMgYW5kIGZvbGRlcnMgdG8gY29weSAqL1xuICBzdGF0aWNQYXRocyA9IG5ldyBNYXA8XG4gICAgc3RyaW5nLFxuICAgIHsgZGVzdDogc3RyaW5nIHwgKChwYXRoOiBzdHJpbmcpID0+IHN0cmluZykgfCB1bmRlZmluZWQ7IGRpck9ubHk6IGJvb2xlYW4gfVxuICA+KCk7XG5cbiAgLyoqIExpc3Qgb2Ygc3RhdGljIGZpbGVzIGFuZCBmb2xkZXJzIHRvIGNvcHkgKi9cbiAgY29weVJlbWFpbmluZ0ZpbGVzPzogKHBhdGg6IHN0cmluZykgPT4gc3RyaW5nIHwgYm9vbGVhbjtcblxuICAvKiogRXh0cmEgY29kZSBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBvbmVudHMgKi9cbiAgZXh0cmFDb2RlID0gbmV3IE1hcDxzdHJpbmcsIE1hcDxzdHJpbmcsIHN0cmluZz4+KCk7XG5cbiAgY29tcG9uZW50czoge1xuICAgIC8qKiBGaWxlIG5hbWUgdXNlZCB0byBvdXRwdXQgdGhlIGV4dHJhIENTUyBjb2RlIGdlbmVyYXRlZCBieSB0aGUgY29tcG9uZW50cyAqL1xuICAgIGNzc0ZpbGU6IHN0cmluZztcblxuICAgIC8qKiBGaWxlIG5hbWUgdXNlZCB0byBvdXRwdXQgdGhlIGV4dHJhIEphdmFTY3JpcHQgY29kZSBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBvbmVudHMgKi9cbiAgICBqc0ZpbGU6IHN0cmluZztcblxuICAgIC8qKiBWYXJpYWJsZSBuYW1lIHVzZWQgdG8gYWNjZXNzIHRvIHRoZSBjb21wb25lbnRzICovXG4gICAgdmFyaWFibGU6IHN0cmluZztcbiAgfTtcblxuICAvKiogVGhlIGRhdGEgYXNzaWduZWQgcGVyIHBhdGggKi9cbiAgZGF0YSA9IG5ldyBNYXA8c3RyaW5nLCBQYXJ0aWFsPERhdGE+PigpO1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IE9wdGlvbnMpIHtcbiAgICB0aGlzLmRhdGFMb2FkZXIgPSBvcHRpb25zLmRhdGFMb2FkZXI7XG4gICAgdGhpcy5jb21wb25lbnRMb2FkZXIgPSBvcHRpb25zLmNvbXBvbmVudExvYWRlcjtcbiAgICB0aGlzLmZzID0gb3B0aW9ucy5mcztcbiAgICB0aGlzLmZvcm1hdHMgPSBvcHRpb25zLmZvcm1hdHM7XG4gICAgdGhpcy5jb21wb25lbnRzID0gb3B0aW9ucy5jb21wb25lbnRzO1xuICAgIHRoaXMuc2NvcGVkRGF0YSA9IG9wdGlvbnMuc2NvcGVkRGF0YTtcbiAgICB0aGlzLnNjb3BlZFBhZ2VzID0gb3B0aW9ucy5zY29wZWRQYWdlcztcbiAgICB0aGlzLnNjb3BlZENvbXBvbmVudHMgPSBvcHRpb25zLnNjb3BlZENvbXBvbmVudHM7XG4gICAgdGhpcy5wcmV0dHlVcmxzID0gb3B0aW9ucy5wcmV0dHlVcmxzO1xuICB9XG5cbiAgYWRkSWdub3JlZFBhdGgocGF0aDogc3RyaW5nKSB7XG4gICAgdGhpcy5pZ25vcmVkLmFkZChub3JtYWxpemVQYXRoKHBhdGgpKTtcbiAgfVxuXG4gIGFkZElnbm9yZUZpbHRlcihmaWx0ZXI6IFNjb3BlRmlsdGVyKSB7XG4gICAgdGhpcy5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgfVxuXG4gIGFkZFN0YXRpY1BhdGgoZnJvbTogc3RyaW5nLCB0bz86IHN0cmluZyB8ICgocGF0aDogc3RyaW5nKSA9PiBzdHJpbmcpKSB7XG4gICAgdGhpcy5zdGF0aWNQYXRocy5zZXQoXG4gICAgICBub3JtYWxpemVQYXRoKGZyb20ucmVwbGFjZSgvXFwvJC8sIFwiXCIpKSxcbiAgICAgIHtcbiAgICAgICAgZGVzdDogdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gbm9ybWFsaXplUGF0aCh0bykgOiB0byxcbiAgICAgICAgZGlyT25seTogZnJvbS5lbmRzV2l0aChcIi9cIiksXG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICBhc3luYyBidWlsZCguLi5idWlsZEZpbHRlcnM6IEJ1aWxkRmlsdGVyW10pOiBQcm9taXNlPFtQYWdlW10sIFN0YXRpY0ZpbGVbXV0+IHtcbiAgICBjb25zdCBwYWdlczogUGFnZVtdID0gW107XG4gICAgY29uc3Qgc3RhdGljRmlsZXM6IFN0YXRpY0ZpbGVbXSA9IFtdO1xuXG4gICAgYXdhaXQgdGhpcy4jYnVpbGQoXG4gICAgICBidWlsZEZpbHRlcnMsXG4gICAgICB0aGlzLmZzLmVudHJpZXMuZ2V0KFwiL1wiKSEsXG4gICAgICBcIi9cIixcbiAgICAgIG5ldyBNYXAoKSxcbiAgICAgIHt9LFxuICAgICAgcGFnZXMsXG4gICAgICBzdGF0aWNGaWxlcyxcbiAgICApO1xuXG4gICAgcmV0dXJuIFtcbiAgICAgIHBhZ2VzLFxuICAgICAgc3RhdGljRmlsZXMsXG4gICAgXTtcbiAgfVxuXG4gIGFzeW5jICNidWlsZChcbiAgICBidWlsZEZpbHRlcnM6IEJ1aWxkRmlsdGVyW10sXG4gICAgZGlyOiBFbnRyeSxcbiAgICBwYXRoOiBzdHJpbmcsXG4gICAgcGFyZW50Q29tcG9uZW50czogQ29tcG9uZW50cyxcbiAgICBwYXJlbnREYXRhOiBSYXdEYXRhLFxuICAgIHBhZ2VzOiBQYWdlW10sXG4gICAgc3RhdGljRmlsZXM6IFN0YXRpY0ZpbGVbXSxcbiAgKSB7XG4gICAgaWYgKGJ1aWxkRmlsdGVycy5zb21lKChmaWx0ZXIpID0+ICFmaWx0ZXIoZGlyKSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBQYXJzZSB0aGUgZGF0ZS90aW1lIGluIHRoZSBmb2xkZXIgbmFtZVxuICAgIGNvbnN0IFtiYXNlbmFtZSwgZGF0ZV0gPSBwYXJzZURhdGVGcm9tRmlsZW5hbWUoZGlyLm5hbWUpO1xuXG4gICAgLy8gTG9hZCB0aGUgX2RhdGEgZmlsZXNcbiAgICBjb25zdCBkaXJEYXRhczogUmF3RGF0YVtdID0gW107XG5cbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGRpci5jaGlsZHJlbi52YWx1ZXMoKSkge1xuICAgICAgaWYgKFxuICAgICAgICAoZW50cnkudHlwZSA9PT0gXCJmaWxlXCIgJiYgZW50cnkubmFtZS5zdGFydHNXaXRoKFwiX2RhdGEuXCIpKSB8fFxuICAgICAgICAoZW50cnkudHlwZSA9PT0gXCJkaXJlY3RvcnlcIiAmJiBlbnRyeS5uYW1lID09PSBcIl9kYXRhXCIpXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgbG9hZGVkID0gYXdhaXQgdGhpcy5kYXRhTG9hZGVyLmxvYWQoZW50cnkpO1xuICAgICAgICBpZiAobG9hZGVkKSB7XG4gICAgICAgICAgZGlyRGF0YXMucHVzaChsb2FkZWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRhdGUpIHtcbiAgICAgIGRpckRhdGFzLnB1c2goeyBkYXRlIH0pO1xuICAgIH1cblxuICAgIC8vIE1lcmdlIGRpcmVjdG9yeSBkYXRhXG4gICAgY29uc3QgZGlyRGF0YSA9IG1lcmdlRGF0YShcbiAgICAgIHBhcmVudERhdGEsXG4gICAgICB7IGJhc2VuYW1lIH0sXG4gICAgICB0aGlzLnNjb3BlZERhdGEuZ2V0KGRpci5wYXRoKSB8fCB7fSxcbiAgICAgIC4uLmRpckRhdGFzLFxuICAgICkgYXMgUGFydGlhbDxEYXRhPjtcblxuICAgIHBhdGggPSBwb3NpeC5qb2luKHBhdGgsIGRpckRhdGEuYmFzZW5hbWUhKTtcblxuICAgIC8vIERpcmVjdG9yeSBjb21wb25lbnRzXG4gICAgY29uc3Qgc2NvcGVkQ29tcG9uZW50cyA9IHRoaXMuc2NvcGVkQ29tcG9uZW50cy5nZXQoZGlyLnBhdGgpO1xuICAgIGxldCBsb2FkZWRDb21wb25lbnRzOiBDb21wb25lbnRzIHwgdW5kZWZpbmVkO1xuXG4gICAgLy8gTG9hZCBfY29tcG9uZW50cyBmaWxlc1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgZGlyLmNoaWxkcmVuLnZhbHVlcygpKSB7XG4gICAgICBpZiAoZW50cnkudHlwZSA9PT0gXCJkaXJlY3RvcnlcIiAmJiBlbnRyeS5uYW1lID09PSBcIl9jb21wb25lbnRzXCIpIHtcbiAgICAgICAgbG9hZGVkQ29tcG9uZW50cyA9IGF3YWl0IHRoaXMuY29tcG9uZW50TG9hZGVyLmxvYWQoZW50cnksIGRpckRhdGEpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNZXJnZSB0aGUgY29tcG9uZW50c1xuICAgIGlmIChzY29wZWRDb21wb25lbnRzIHx8IGxvYWRlZENvbXBvbmVudHMpIHtcbiAgICAgIHBhcmVudENvbXBvbmVudHMgPSBtZXJnZUNvbXBvbmVudHMoXG4gICAgICAgIHBhcmVudENvbXBvbmVudHMsXG4gICAgICAgIHNjb3BlZENvbXBvbmVudHMgfHwgbmV3IE1hcCgpLFxuICAgICAgICBsb2FkZWRDb21wb25lbnRzIHx8IG5ldyBNYXAoKSxcbiAgICAgICk7XG5cbiAgICAgIGRpckRhdGFbdGhpcy5jb21wb25lbnRzLnZhcmlhYmxlXSA9IHRvUHJveHkoXG4gICAgICAgIHBhcmVudENvbXBvbmVudHMsXG4gICAgICAgIHRoaXMuZXh0cmFDb2RlLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBTdG9yZSB0aGUgcm9vdCBkYXRhIHRvIGJlIHVzZWQgYnkgb3RoZXIgcGx1Z2luc1xuICAgIHRoaXMuZGF0YS5zZXQocGF0aCwgZGlyRGF0YSk7XG5cbiAgICAvLyBMb2FkIHRoZSBwYWdlcyBhc3NpZ25lZCB0byB0aGUgY3VycmVudCBwYXRoXG4gICAgaWYgKHRoaXMuc2NvcGVkUGFnZXMuaGFzKGRpci5wYXRoKSkge1xuICAgICAgZm9yIChjb25zdCBkYXRhIG9mIHRoaXMuc2NvcGVkUGFnZXMuZ2V0KGRpci5wYXRoKSEpIHtcbiAgICAgICAgY29uc3QgYmFzZW5hbWUgPSBwb3NpeC5iYXNlbmFtZShkYXRhLnVybCBhcyBzdHJpbmcpLnJlcGxhY2UoXG4gICAgICAgICAgL1xcLltcXHcuXSskLyxcbiAgICAgICAgICBcIlwiLFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBwYWdlID0gbmV3IFBhZ2UoKTtcbiAgICAgICAgcGFnZS5kYXRhID0gbWVyZ2VEYXRhKFxuICAgICAgICAgIGRpckRhdGEsXG4gICAgICAgICAgeyBiYXNlbmFtZSwgZGF0ZTogbmV3IERhdGUoKSB9LFxuICAgICAgICAgIGRhdGEsXG4gICAgICAgICkgYXMgRGF0YTtcblxuICAgICAgICBjb25zdCB1cmwgPSBnZXRQYWdlVXJsKHBhZ2UsIHRoaXMucHJldHR5VXJscywgcGF0aCk7XG4gICAgICAgIGlmICghdXJsKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcGFnZS5kYXRhLnVybCA9IHVybDtcbiAgICAgICAgcGFnZS5kYXRhLmRhdGUgPSBnZXRQYWdlRGF0ZShwYWdlKTtcbiAgICAgICAgcGFnZS5kYXRhLnBhZ2UgPSBwYWdlO1xuICAgICAgICBwYWdlcy5wdXNoKHBhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIExvYWQgdGhlIHBhZ2VzIGFuZCBzdGF0aWMgZmlsZXNcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGRpci5jaGlsZHJlbi52YWx1ZXMoKSkge1xuICAgICAgaWYgKGJ1aWxkRmlsdGVycy5zb21lKChmaWx0ZXIpID0+ICFmaWx0ZXIoZW50cnkpKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gU3RhdGljIGZpbGVzXG4gICAgICBpZiAodGhpcy5zdGF0aWNQYXRocy5oYXMoZW50cnkucGF0aCkpIHtcbiAgICAgICAgY29uc3QgeyBkZXN0LCBkaXJPbmx5IH0gPSB0aGlzLnN0YXRpY1BhdGhzLmdldChlbnRyeS5wYXRoKSE7XG5cbiAgICAgICAgc3RhdGljRmlsZXMucHVzaCguLi50aGlzLiNnZXRTdGF0aWNGaWxlcyhwYXRoLCBlbnRyeSwgZGVzdCwgZGlyT25seSkpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGVudHJ5IHNob3VsZCBiZSBpZ25vcmVkXG4gICAgICBpZiAoXG4gICAgICAgIChlbnRyeS5uYW1lLnN0YXJ0c1dpdGgoXCIuXCIpICYmICFpc1dlbGxLbm93bkRpcihlbnRyeSkpIHx8XG4gICAgICAgIGVudHJ5Lm5hbWUuc3RhcnRzV2l0aChcIl9cIikgfHxcbiAgICAgICAgdGhpcy5pZ25vcmVkLmhhcyhlbnRyeS5wYXRoKVxuICAgICAgKSB7XG4gICAgICAgIGZvciAoY29uc3QgW3N0YXRpY1NyYywgeyBkZXN0LCBkaXJPbmx5IH1dIG9mIHRoaXMuc3RhdGljUGF0aHMpIHtcbiAgICAgICAgICBpZiAoc3RhdGljU3JjLnN0YXJ0c1dpdGgoZW50cnkucGF0aCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRpY0VudHJ5ID0gdGhpcy5mcy5lbnRyaWVzLmdldChzdGF0aWNTcmMpITtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRpY1BhdGggPSBwb3NpeC5kaXJuYW1lKFxuICAgICAgICAgICAgICBwb3NpeC5qb2luKHBhdGgsIHN0YXRpY0VudHJ5LnBhdGguc2xpY2UoZW50cnkucGF0aC5sZW5ndGgpKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBzdGF0aWNGaWxlcy5wdXNoKFxuICAgICAgICAgICAgICAuLi50aGlzLiNnZXRTdGF0aWNGaWxlcyhzdGF0aWNQYXRoLCBzdGF0aWNFbnRyeSwgZGVzdCwgZGlyT25seSksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZmlsdGVycy5zb21lKChmaWx0ZXIpID0+IGZpbHRlcihlbnRyeS5wYXRoKSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbnRyeS50eXBlID09PSBcImZpbGVcIikge1xuICAgICAgICBjb25zdCBmb3JtYXQgPSB0aGlzLmZvcm1hdHMuc2VhcmNoKGVudHJ5LnBhdGgpO1xuXG4gICAgICAgIC8vIFVua25vd24gZmlsZSBmb3JtYXRcbiAgICAgICAgaWYgKCFmb3JtYXQpIHtcbiAgICAgICAgICAvLyBSZW1haW5pbmcgZmlsZXNcbiAgICAgICAgICBpZiAodGhpcy5jb3B5UmVtYWluaW5nRmlsZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlc3QgPSB0aGlzLmNvcHlSZW1haW5pbmdGaWxlcyhlbnRyeS5wYXRoKTtcblxuICAgICAgICAgICAgaWYgKGRlc3QpIHtcbiAgICAgICAgICAgICAgc3RhdGljRmlsZXMucHVzaChcbiAgICAgICAgICAgICAgICAuLi50aGlzLiNnZXRTdGF0aWNGaWxlcyhcbiAgICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgICBlbnRyeSxcbiAgICAgICAgICAgICAgICAgIHR5cGVvZiBkZXN0ID09PSBcInN0cmluZ1wiID8gZGVzdCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBmaWxlIGlzIGEgc3RhdGljIGZpbGVcbiAgICAgICAgaWYgKGZvcm1hdC5jb3B5KSB7XG4gICAgICAgICAgc3RhdGljRmlsZXMucHVzaChcbiAgICAgICAgICAgIC4uLnRoaXMuI2dldFN0YXRpY0ZpbGVzKFxuICAgICAgICAgICAgICBwYXRoLFxuICAgICAgICAgICAgICBlbnRyeSxcbiAgICAgICAgICAgICAgdHlwZW9mIGZvcm1hdC5jb3B5ID09PSBcImZ1bmN0aW9uXCIgPyBmb3JtYXQuY29weSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBmaWxlIGlzIGEgcGFnZVxuICAgICAgICBpZiAoZm9ybWF0LnBhZ2VUeXBlKSB7XG4gICAgICAgICAgY29uc3QgbG9hZGVyID0gZm9ybWF0LnBhZ2VUeXBlID09PSBcImFzc2V0XCJcbiAgICAgICAgICAgID8gZm9ybWF0LmFzc2V0TG9hZGVyXG4gICAgICAgICAgICA6IGZvcm1hdC5sb2FkZXI7XG5cbiAgICAgICAgICBpZiAoIWxvYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgTWlzc2luZyBsb2FkZXIgZm9yICR7Zm9ybWF0LnBhZ2VUeXBlfSBwYWdlIHR5cGUgKCR7ZW50cnkucGF0aH0pKWAsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHsgZXh0IH0gPSBmb3JtYXQ7XG4gICAgICAgICAgY29uc3QgW2Jhc2VuYW1lLCBkYXRlXSA9IHBhcnNlRGF0ZUZyb21GaWxlbmFtZShlbnRyeS5uYW1lKTtcblxuICAgICAgICAgIC8vIENyZWF0ZSB0aGUgcGFnZVxuICAgICAgICAgIGNvbnN0IHBhZ2UgPSBuZXcgUGFnZSh7XG4gICAgICAgICAgICBwYXRoOiBlbnRyeS5wYXRoLnNsaWNlKDAsIC1leHQubGVuZ3RoKSxcbiAgICAgICAgICAgIGV4dCxcbiAgICAgICAgICAgIGFzc2V0OiBmb3JtYXQucGFnZVR5cGUgPT09IFwiYXNzZXRcIixcbiAgICAgICAgICAgIGVudHJ5LFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gTG9hZCBhbmQgbWVyZ2UgdGhlIHBhZ2UgZGF0YVxuICAgICAgICAgIGNvbnN0IHBhZ2VEYXRhID0gYXdhaXQgZW50cnkuZ2V0Q29udGVudChsb2FkZXIpO1xuICAgICAgICAgIHBhZ2UuZGF0YSA9IG1lcmdlRGF0YShcbiAgICAgICAgICAgIGRpckRhdGEsXG4gICAgICAgICAgICB7IGJhc2VuYW1lOiBiYXNlbmFtZS5zbGljZSgwLCAtZXh0Lmxlbmd0aCkgfSxcbiAgICAgICAgICAgIGRhdGUgPyB7IGRhdGUgfSA6IHt9LFxuICAgICAgICAgICAgdGhpcy5zY29wZWREYXRhLmdldChlbnRyeS5wYXRoKSB8fCB7fSxcbiAgICAgICAgICAgIHBhZ2VEYXRhLFxuICAgICAgICAgICkgYXMgRGF0YTtcblxuICAgICAgICAgIGNvbnN0IHVybCA9IGdldFBhZ2VVcmwocGFnZSwgdGhpcy5wcmV0dHlVcmxzLCBwYXRoKTtcbiAgICAgICAgICBpZiAoIXVybCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhZ2UuZGF0YS51cmwgPSB1cmw7XG4gICAgICAgICAgcGFnZS5kYXRhLmRhdGUgPSBnZXRQYWdlRGF0ZShwYWdlKTtcbiAgICAgICAgICBwYWdlLmRhdGEucGFnZSA9IHBhZ2U7XG4gICAgICAgICAgcGFnZS5fZGF0YS5sYXlvdXQgPSBwYWdlRGF0YS5sYXlvdXQ7XG5cbiAgICAgICAgICBpZiAoYnVpbGRGaWx0ZXJzLnNvbWUoKGZpbHRlcikgPT4gIWZpbHRlcihlbnRyeSwgcGFnZSkpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYWdlcy5wdXNoKHBhZ2UpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIExvYWQgcmVjdXJzaXZlbHkgdGhlIGRpcmVjdG9yeVxuICAgICAgaWYgKGVudHJ5LnR5cGUgPT09IFwiZGlyZWN0b3J5XCIpIHtcbiAgICAgICAgYXdhaXQgdGhpcy4jYnVpbGQoXG4gICAgICAgICAgYnVpbGRGaWx0ZXJzLFxuICAgICAgICAgIGVudHJ5LFxuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50cyxcbiAgICAgICAgICBkaXJEYXRhLFxuICAgICAgICAgIHBhZ2VzLFxuICAgICAgICAgIHN0YXRpY0ZpbGVzLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbcGFnZXMsIHN0YXRpY0ZpbGVzXTtcbiAgfVxuXG4gIC8qKiBSZXR1cm5zIHRoZSBwYWdlcyB3aXRoIGV4dHJhIGNvZGUgZ2VuZXJhdGVkIGJ5IHRoZSBjb21wb25lbnRzICovXG4gIGdldENvbXBvbmVudHNFeHRyYUNvZGUoKTogUGFnZVtdIHtcbiAgICBjb25zdCBmaWxlcyA9IHtcbiAgICAgIGNzczogdGhpcy5jb21wb25lbnRzLmNzc0ZpbGUsXG4gICAgICBqczogdGhpcy5jb21wb25lbnRzLmpzRmlsZSxcbiAgICB9O1xuICAgIGNvbnN0IHBhZ2VzOiBQYWdlW10gPSBbXTtcblxuICAgIGZvciAoY29uc3QgW3R5cGUsIHBhdGhdIG9mIE9iamVjdC5lbnRyaWVzKGZpbGVzKSkge1xuICAgICAgY29uc3QgY29kZSA9IHRoaXMuZXh0cmFDb2RlLmdldCh0eXBlKTtcblxuICAgICAgaWYgKGNvZGUgJiYgY29kZS5zaXplKSB7XG4gICAgICAgIHBhZ2VzLnB1c2goXG4gICAgICAgICAgUGFnZS5jcmVhdGUoe1xuICAgICAgICAgICAgdXJsOiBwYXRoLFxuICAgICAgICAgICAgY29udGVudDogQXJyYXkuZnJvbShjb2RlLnZhbHVlcygpKS5qb2luKFwiXFxuXCIpLFxuICAgICAgICAgIH0pLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwYWdlcztcbiAgfVxuXG4gIC8qKiBTY2FuIHRoZSBzdGF0aWMgZmlsZXMgaW4gYSBkaXJlY3RvcnkgKi9cbiAgKiNzY2FuU3RhdGljRmlsZXMoXG4gICAgZGlyRW50cnk6IEVudHJ5LFxuICAgIGRlc3RQYXRoOiBzdHJpbmcsXG4gICAgZGVzdEZuPzogKGZpbGU6IHN0cmluZykgPT4gc3RyaW5nLFxuICApOiBHZW5lcmF0b3I8U3RhdGljRmlsZT4ge1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgZGlyRW50cnkuY2hpbGRyZW4udmFsdWVzKCkpIHtcbiAgICAgIGlmIChlbnRyeS50eXBlID09PSBcImZpbGVcIikge1xuICAgICAgICBpZiAoZW50cnkubmFtZS5zdGFydHNXaXRoKFwiLlwiKSB8fCBlbnRyeS5uYW1lLnN0YXJ0c1dpdGgoXCJfXCIpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgZmlsZSBzaG91bGQgYmUgaWdub3JlZFxuICAgICAgICBpZiAodGhpcy5pZ25vcmVkLmhhcyhlbnRyeS5wYXRoKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZmlsdGVycy5zb21lKChmaWx0ZXIpID0+IGZpbHRlcihlbnRyeS5wYXRoKSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG91dHB1dFBhdGggPSBnZXRPdXRwdXRQYXRoKGVudHJ5LCBkZXN0UGF0aCwgZGVzdEZuKTtcbiAgICAgICAgeWllbGQgeyBlbnRyeSwgb3V0cHV0UGF0aCB9O1xuICAgICAgfVxuXG4gICAgICBpZiAoZW50cnkudHlwZSA9PT0gXCJkaXJlY3RvcnlcIikge1xuICAgICAgICB5aWVsZCogdGhpcy4jc2NhblN0YXRpY0ZpbGVzKFxuICAgICAgICAgIGVudHJ5LFxuICAgICAgICAgIHBvc2l4LmpvaW4oZGVzdFBhdGgsIGVudHJ5Lm5hbWUpLFxuICAgICAgICAgIGRlc3RGbixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAjZ2V0U3RhdGljRmlsZXMoXG4gICAgcGF0aDogc3RyaW5nLFxuICAgIGVudHJ5OiBFbnRyeSxcbiAgICBkZXN0OiBzdHJpbmcgfCAoKHBhdGg6IHN0cmluZykgPT4gc3RyaW5nKSB8IHVuZGVmaW5lZCxcbiAgICBkaXJPbmx5ID0gZmFsc2UsXG4gICk6IFN0YXRpY0ZpbGVbXSB7XG4gICAgaWYgKGVudHJ5LnR5cGUgPT09IFwiZmlsZVwiKSB7XG4gICAgICBpZiAoIWRpck9ubHkpIHtcbiAgICAgICAgcmV0dXJuIFt7XG4gICAgICAgICAgZW50cnksXG4gICAgICAgICAgb3V0cHV0UGF0aDogZ2V0T3V0cHV0UGF0aChlbnRyeSwgcGF0aCwgZGVzdCksXG4gICAgICAgIH1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuI3NjYW5TdGF0aWNGaWxlcyhcbiAgICAgIGVudHJ5LFxuICAgICAgdHlwZW9mIGRlc3QgPT09IFwic3RyaW5nXCIgPyBkZXN0IDogcG9zaXguam9pbihwYXRoLCBlbnRyeS5uYW1lKSxcbiAgICAgIHR5cGVvZiBkZXN0ID09PSBcImZ1bmN0aW9uXCIgPyBkZXN0IDogdW5kZWZpbmVkLFxuICAgICkpO1xuICB9XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuZCByZXR1cm5zIGEgcHJveHkgdG8gdXNlIHRoZSBjb21wb25lbnRzXG4gKiBhcyBjb21wLm5hbWUoKSBpbnN0ZWFkIG9mIGNvbXBvbmVudHMuZ2V0KFwibmFtZVwiKS5yZW5kZXIoKVxuICovXG5mdW5jdGlvbiB0b1Byb3h5KFxuICBjb21wb25lbnRzOiBDb21wb25lbnRzLFxuICBleHRyYUNvZGU/OiBNYXA8c3RyaW5nLCBNYXA8c3RyaW5nLCBzdHJpbmc+Pixcbik6IFByb3h5Q29tcG9uZW50cyB7XG4gIGNvbnN0IG5vZGUgPSB7XG4gICAgX2NvbXBvbmVudHM6IGNvbXBvbmVudHMsXG4gICAgX3Byb3hpZXM6IG5ldyBNYXAoKSxcbiAgfTtcbiAgcmV0dXJuIG5ldyBQcm94eShub2RlLCB7XG4gICAgZ2V0OiAodGFyZ2V0LCBuYW1lKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIgfHwgbmFtZSBpbiB0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXkgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGlmICh0YXJnZXQuX3Byb3hpZXMuaGFzKGtleSkpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldC5fcHJveGllcy5nZXQoa2V5KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29tcG9uZW50ID0gdGFyZ2V0Ll9jb21wb25lbnRzLmdldChrZXkpO1xuXG4gICAgICBpZiAoIWNvbXBvbmVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvbXBvbmVudCBcIiR7bmFtZX1cIiBub3QgZm91bmRgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbXBvbmVudCBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICBjb25zdCBwcm94eSA9IHRvUHJveHkoY29tcG9uZW50LCBleHRyYUNvZGUpO1xuICAgICAgICB0YXJnZXQuX3Byb3hpZXMuc2V0KGtleSwgcHJveHkpO1xuICAgICAgICByZXR1cm4gcHJveHk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNhdmUgQ1NTICYgSlMgY29kZSBmb3IgdGhlIGNvbXBvbmVudFxuICAgICAgaWYgKGV4dHJhQ29kZSkge1xuICAgICAgICBpZiAoY29tcG9uZW50LmNzcykge1xuICAgICAgICAgIGNvbnN0IGNvZGUgPSBleHRyYUNvZGUuZ2V0KFwiY3NzXCIpID8/IG5ldyBNYXAoKTtcbiAgICAgICAgICBjb2RlLnNldChrZXksIGNvbXBvbmVudC5jc3MpO1xuICAgICAgICAgIGV4dHJhQ29kZS5zZXQoXCJjc3NcIiwgY29kZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29tcG9uZW50LmpzKSB7XG4gICAgICAgICAgY29uc3QgY29kZSA9IGV4dHJhQ29kZS5nZXQoXCJqc1wiKSA/PyBuZXcgTWFwKCk7XG4gICAgICAgICAgY29kZS5zZXQoa2V5LCBjb21wb25lbnQuanMpO1xuICAgICAgICAgIGV4dHJhQ29kZS5zZXQoXCJqc1wiLCBjb2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBSZXR1cm4gdGhlIGZ1bmN0aW9uIHRvIHJlbmRlciB0aGUgY29tcG9uZW50XG4gICAgICByZXR1cm4gKHByb3BzOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPikgPT4gY29tcG9uZW50LnJlbmRlcihwcm9wcyk7XG4gICAgfSxcbiAgfSkgYXMgdW5rbm93biBhcyBQcm94eUNvbXBvbmVudHM7XG59XG5cbmV4cG9ydCB0eXBlIEJ1aWxkRmlsdGVyID0gKGVudHJ5OiBFbnRyeSwgcGFnZT86IFBhZ2UpID0+IGJvb2xlYW47XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJveHlDb21wb25lbnRzIHtcbiAgLy8gZGVuby1saW50LWlnbm9yZSBuby1leHBsaWNpdC1hbnlcbiAgKHByb3BzPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pOiBhbnk7XG4gIFtrZXk6IHN0cmluZ106IFByb3h5Q29tcG9uZW50cztcbn1cblxuLyoqIE1lcmdlIHRoZSBjYXNjYWRlIGNvbXBvbmVudHMgKi9cbmZ1bmN0aW9uIG1lcmdlQ29tcG9uZW50cyguLi5jb21wb25lbnRzOiBDb21wb25lbnRzW10pOiBDb21wb25lbnRzIHtcbiAgcmV0dXJuIGNvbXBvbmVudHMucmVkdWNlKChwcmV2aW91cywgY3VycmVudCkgPT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudHMgPSBuZXcgTWFwKHByZXZpb3VzKTtcblxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGN1cnJlbnQpIHtcbiAgICAgIGlmIChjb21wb25lbnRzLmhhcyhrZXkpKSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSBjb21wb25lbnRzLmdldChrZXkpO1xuXG4gICAgICAgIGlmIChwcmV2aW91c1ZhbHVlIGluc3RhbmNlb2YgTWFwICYmIHZhbHVlIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgY29tcG9uZW50cy5zZXQoa2V5LCBtZXJnZUNvbXBvbmVudHModmFsdWUsIHByZXZpb3VzVmFsdWUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21wb25lbnRzLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcG9uZW50cy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnRzO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0T3V0cHV0UGF0aChcbiAgZW50cnk6IEVudHJ5LFxuICBwYXRoOiBzdHJpbmcsXG4gIGRlc3Q/OiBzdHJpbmcgfCAoKHBhdGg6IHN0cmluZykgPT4gc3RyaW5nKSxcbik6IHN0cmluZyB7XG4gIGlmICh0eXBlb2YgZGVzdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIGRlc3QocG9zaXguam9pbihwYXRoLCBlbnRyeS5uYW1lKSk7XG4gIH1cblxuICBpZiAodHlwZW9mIGRlc3QgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZGVzdDtcbiAgfVxuXG4gIHJldHVybiBwb3NpeC5qb2luKHBhdGgsIGVudHJ5Lm5hbWUpO1xufVxuXG5mdW5jdGlvbiBpc1dlbGxLbm93bkRpcihlbnRyeTogRW50cnkpIHtcbiAgcmV0dXJuIGVudHJ5LnR5cGUgPT09IFwiZGlyZWN0b3J5XCIgJiYgZW50cnkucGF0aCA9PT0gXCIvLndlbGwta25vd25cIjtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLEtBQUssUUFBUSxrQkFBa0I7QUFDeEMsU0FBUyxhQUFhLFFBQVEsa0JBQWtCO0FBQ2hELFNBQVMsU0FBUyxRQUFRLHdCQUF3QjtBQUNsRCxTQUFTLHFCQUFxQixRQUFRLGtCQUFrQjtBQUN4RCxTQUFTLFVBQVUsUUFBUSxzQkFBc0I7QUFDakQsU0FBUyxXQUFXLFFBQVEsdUJBQXVCO0FBQ25ELFNBQVMsSUFBSSxRQUFvQixZQUFZO0FBNEI3Qzs7O0NBR0MsR0FDRCxlQUFlLE1BQU07RUFDbkIsc0NBQXNDLEdBQ3RDLEdBQU87RUFFUCw0QkFBNEIsR0FDNUIsV0FBdUI7RUFFdkIsMkJBQTJCLEdBQzNCLGdCQUFpQztFQUVqQyxvREFBb0QsR0FDcEQsUUFBaUI7RUFFakIsZ0NBQWdDLEdBQ2hDLFVBQVUsSUFBSSxNQUFjO0VBRTVC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