import * as ansiEscapes from "./ansi_escapes.ts";
import { getCursorPosition } from "./cursor_position.ts";
/**
 * Chainable ansi escape sequences.
 * If invoked as method, a new Tty instance will be returned.
 * ```
 * tty.cursorTo(0, 0).eraseScreen();
 * ```
 */ export const tty = factory();
function factory(options) {
  let result = "";
  let stack = [];
  const stdout = options?.stdout ?? Deno.stdout;
  const stdin = options?.stdin ?? Deno.stdin;
  const tty = function(...args) {
    if (this) {
      update(args);
      stdout.writeSync(new TextEncoder().encode(result));
      return this;
    }
    return factory(args[0] ?? options);
  };
  tty.text = function(text) {
    stack.push([
      text,
      []
    ]);
    update();
    stdout.writeSync(new TextEncoder().encode(result));
    return this;
  };
  tty.getCursorPosition = ()=>getCursorPosition({
      stdout,
      stdin
    });
  const methodList = Object.entries(ansiEscapes);
  for (const [name, method] of methodList){
    if (name === "cursorPosition") {
      continue;
    }
    Object.defineProperty(tty, name, {
      get () {
        stack.push([
          method,
          []
        ]);
        return this;
      }
    });
  }
  return tty;
  function update(args) {
    if (!stack.length) {
      return;
    }
    if (args) {
      stack[stack.length - 1][1] = args;
    }
    result = stack.reduce((prev, [cur, args])=>prev + (typeof cur === "string" ? cur : cur.call(tty, ...args)), "");
    stack = [];
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvY2xpZmZ5QHYwLjI1LjcvYW5zaS90dHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYW5zaUVzY2FwZXMgZnJvbSBcIi4vYW5zaV9lc2NhcGVzLnRzXCI7XG5pbXBvcnQgdHlwZSB7IENoYWluIH0gZnJvbSBcIi4vY2hhaW4udHNcIjtcbmltcG9ydCB7IEN1cnNvciwgZ2V0Q3Vyc29yUG9zaXRpb24gfSBmcm9tIFwiLi9jdXJzb3JfcG9zaXRpb24udHNcIjtcblxuLyoqIENyZWF0ZSBuZXcgYEFuc2lgIGluc3RhbmNlLiAqL1xuZXhwb3J0IGludGVyZmFjZSBUdHlPcHRpb25zIHtcbiAgc3Rkb3V0PzogRGVuby5Xcml0ZXJTeW5jO1xuICBzdGRpbj86IERlbm8uUmVhZGVyU3luYyAmIHsgcmlkOiBudW1iZXIgfTtcbn1cblxudHlwZSBFeGVjdXRvciA9ICh0aGlzOiBUdHlDaGFpbiwgLi4uYXJnczogQXJncykgPT4gc3RyaW5nO1xudHlwZSBBcmdzID0gQXJyYXk8dW5rbm93bj47XG50eXBlIFByb3BlcnR5ID0gc3RyaW5nIHwgRXhlY3V0b3I7XG50eXBlIFByb3BlcnR5TmFtZXMgPSBrZXlvZiBDaGFpbjxUdHlDaGFpbj47XG5cbi8qKiBBbnNpIGluc3RhbmNlIHJldHVybmVkIGJ5IGFsbCBhbnNpIGVzY2FwZSBwcm9wZXJ0aWVzLiAqL1xuZXhwb3J0IGludGVyZmFjZSBUdHlDaGFpbiBleHRlbmRzIEV4Y2x1ZGU8Q2hhaW48VHR5Q2hhaW4+LCBcImN1cnNvclBvc2l0aW9uXCI+IHtcbiAgLyoqIFdyaXRlIGFuc2kgZXNjYXBlIHNlcXVlbmNlLiAqL1xuICAoKTogdm9pZDtcbiAgLyoqIEdldCBjdXJyZW50IGN1cnNvciBwb3NpdGlvbi4gKi9cbiAgZ2V0Q3Vyc29yUG9zaXRpb24oKTogQ3Vyc29yO1xufVxuXG4vKiogQ3JlYXRlIG5ldyBgVHR5YCBpbnN0YW5jZS4gKi9cbmV4cG9ydCB0eXBlIFR0eUZhY3RvcnkgPSAob3B0aW9ucz86IFR0eU9wdGlvbnMpID0+IFR0eTtcblxuLyoqXG4gKiBDaGFpbmFibGUgYW5zaSBlc2NhcGUgc2VxdWVuY2VzLlxuICogSWYgaW52b2tlZCBhcyBtZXRob2QsIGEgbmV3IFR0eSBpbnN0YW5jZSB3aWxsIGJlIHJldHVybmVkLlxuICovXG5leHBvcnQgdHlwZSBUdHkgPSBUdHlGYWN0b3J5ICYgVHR5Q2hhaW47XG5cbi8qKlxuICogQ2hhaW5hYmxlIGFuc2kgZXNjYXBlIHNlcXVlbmNlcy5cbiAqIElmIGludm9rZWQgYXMgbWV0aG9kLCBhIG5ldyBUdHkgaW5zdGFuY2Ugd2lsbCBiZSByZXR1cm5lZC5cbiAqIGBgYFxuICogdHR5LmN1cnNvclRvKDAsIDApLmVyYXNlU2NyZWVuKCk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IHR0eTogVHR5ID0gZmFjdG9yeSgpO1xuXG5mdW5jdGlvbiBmYWN0b3J5KG9wdGlvbnM/OiBUdHlPcHRpb25zKTogVHR5IHtcbiAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gIGxldCBzdGFjazogQXJyYXk8W1Byb3BlcnR5LCBBcmdzXT4gPSBbXTtcbiAgY29uc3Qgc3Rkb3V0OiBEZW5vLldyaXRlclN5bmMgPSBvcHRpb25zPy5zdGRvdXQgPz8gRGVuby5zdGRvdXQ7XG4gIGNvbnN0IHN0ZGluOiBEZW5vLlJlYWRlclN5bmMgJiB7IHJpZDogbnVtYmVyIH0gPSBvcHRpb25zPy5zdGRpbiA/PyBEZW5vLnN0ZGluO1xuXG4gIGNvbnN0IHR0eTogVHR5ID0gZnVuY3Rpb24gKFxuICAgIHRoaXM6IFR0eUNoYWluIHwgdW5kZWZpbmVkLFxuICAgIC4uLmFyZ3M6IEFyZ3MgfCBbVHR5T3B0aW9uc11cbiAgKTogVHR5Q2hhaW4ge1xuICAgIGlmICh0aGlzKSB7XG4gICAgICB1cGRhdGUoYXJncyk7XG4gICAgICBzdGRvdXQud3JpdGVTeW5jKG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShyZXN1bHQpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gZmFjdG9yeShhcmdzWzBdIGFzIFR0eU9wdGlvbnMgPz8gb3B0aW9ucyk7XG4gIH0gYXMgVHR5O1xuXG4gIHR0eS50ZXh0ID0gZnVuY3Rpb24gKHRleHQ6IHN0cmluZyk6IFR0eUNoYWluIHtcbiAgICBzdGFjay5wdXNoKFt0ZXh0LCBbXV0pO1xuICAgIHVwZGF0ZSgpO1xuICAgIHN0ZG91dC53cml0ZVN5bmMobmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHJlc3VsdCkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHR0eS5nZXRDdXJzb3JQb3NpdGlvbiA9ICgpOiBDdXJzb3IgPT4gZ2V0Q3Vyc29yUG9zaXRpb24oeyBzdGRvdXQsIHN0ZGluIH0pO1xuXG4gIGNvbnN0IG1ldGhvZExpc3Q6IEFycmF5PFtQcm9wZXJ0eU5hbWVzLCBQcm9wZXJ0eV0+ID0gT2JqZWN0LmVudHJpZXMoXG4gICAgYW5zaUVzY2FwZXMsXG4gICkgYXMgQXJyYXk8W1Byb3BlcnR5TmFtZXMsIFByb3BlcnR5XT47XG5cbiAgZm9yIChjb25zdCBbbmFtZSwgbWV0aG9kXSBvZiBtZXRob2RMaXN0KSB7XG4gICAgaWYgKG5hbWUgPT09IFwiY3Vyc29yUG9zaXRpb25cIikge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0dHksIG5hbWUsIHtcbiAgICAgIGdldCh0aGlzOiBUdHlDaGFpbikge1xuICAgICAgICBzdGFjay5wdXNoKFttZXRob2QsIFtdXSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0dHk7XG5cbiAgZnVuY3Rpb24gdXBkYXRlKGFyZ3M/OiBBcmdzKSB7XG4gICAgaWYgKCFzdGFjay5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGFyZ3MpIHtcbiAgICAgIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdWzFdID0gYXJncztcbiAgICB9XG4gICAgcmVzdWx0ID0gc3RhY2sucmVkdWNlKFxuICAgICAgKHByZXY6IHN0cmluZywgW2N1ciwgYXJnc106IFtQcm9wZXJ0eSwgQXJnc10pID0+XG4gICAgICAgIHByZXYgKyAodHlwZW9mIGN1ciA9PT0gXCJzdHJpbmdcIiA/IGN1ciA6IGN1ci5jYWxsKHR0eSwgLi4uYXJncykpLFxuICAgICAgXCJcIixcbiAgICApO1xuICAgIHN0YWNrID0gW107XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLGlCQUFpQixvQkFBb0I7QUFFakQsU0FBaUIsaUJBQWlCLFFBQVEsdUJBQXVCO0FBOEJqRTs7Ozs7O0NBTUMsR0FDRCxPQUFPLE1BQU0sTUFBVyxVQUFVO0FBRWxDLFNBQVMsUUFBUSxPQUFvQjtFQUNuQyxJQUFJLFNBQVM7RUFDYixJQUFJLFFBQWlDLEVBQUU7RUFDdkMsTUFBTSxTQUEwQixTQUFTLFVBQVUsS0FBSyxNQUFNO0VBQzlELE1BQU0sUUFBMkMsU0FBUyxTQUFTLEtBQUssS0FBSztFQUU3RSxNQUFNLE1BQVcsU0FFZixHQUFHLElBQXlCO0lBRTVCLElBQUksSUFBSSxFQUFFO01BQ1IsT0FBTztNQUNQLE9BQU8sU0FBUyxDQUFDLElBQUksY0FBYyxNQUFNLENBQUM7TUFDMUMsT0FBTyxJQUFJO0lBQ2I7SUFDQSxPQUFPLFFBQVEsSUFBSSxDQUFDLEVBQUUsSUFBa0I7RUFDMUM7RUFFQSxJQUFJLElBQUksR0FBRyxTQUFVLElBQVk7SUFDL0IsTUFBTSxJQUFJLENBQUM7TUFBQztNQUFNLEVBQUU7S0FBQztJQUNyQjtJQUNBLE9BQU8sU0FBUyxDQUFDLElBQUksY0FBYyxNQUFNLENBQUM7SUFDMUMsT0FBTyxJQUFJO0VBQ2I7RUFFQSxJQUFJLGlCQUFpQixHQUFHLElBQWMsa0JBQWtCO01BQUU7TUFBUTtJQUFNO0VBRXhFLE1BQU0sYUFBK0MsT0FBTyxPQUFPLENBQ2pFO0VBR0YsS0FBSyxNQUFNLENBQUMsTUFBTSxPQUFPLElBQUksV0FBWTtJQUN2QyxJQUFJLFNBQVMsa0JBQWtCO01BQzdCO0lBQ0Y7SUFDQSxPQUFPLGNBQWMsQ0FBQyxLQUFLLE1BQU07TUFDL0I7UUFDRSxNQUFNLElBQUksQ0FBQztVQUFDO1VBQVEsRUFBRTtTQUFDO1FBQ3ZCLE9BQU8sSUFBSTtNQUNiO0lBQ0Y7RUFDRjtFQUVBLE9BQU87RUFFUCxTQUFTLE9BQU8sSUFBVztJQUN6QixJQUFJLENBQUMsTUFBTSxNQUFNLEVBQUU7TUFDakI7SUFDRjtJQUNBLElBQUksTUFBTTtNQUNSLEtBQUssQ0FBQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHO0lBQy9CO0lBQ0EsU0FBUyxNQUFNLE1BQU0sQ0FDbkIsQ0FBQyxNQUFjLENBQUMsS0FBSyxLQUF1QixHQUMxQyxPQUFPLENBQUMsT0FBTyxRQUFRLFdBQVcsTUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssR0FDaEU7SUFFRixRQUFRLEVBQUU7RUFDWjtBQUNGIn0=