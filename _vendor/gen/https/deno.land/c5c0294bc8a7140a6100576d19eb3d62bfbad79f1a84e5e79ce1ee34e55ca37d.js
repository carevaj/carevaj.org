import date from "lume/plugins/date.ts";
import postcss from "lume/plugins/postcss.ts";
import terser from "lume/plugins/terser.ts";
import prism from "lume/plugins/prism.ts";
import basePath from "lume/plugins/base_path.ts";
import slugifyUrls from "lume/plugins/slugify_urls.ts";
import resolveUrls from "lume/plugins/resolve_urls.ts";
import metas from "lume/plugins/metas.ts";
import pagefind from "lume/plugins/pagefind.ts";
import sitemap from "lume/plugins/sitemap.ts";
import feed from "lume/plugins/feed.ts";
import readingInfo from "lume/plugins/reading_info.ts";
import { merge } from "lume/core/utils/object.ts";
import toc from "https://deno.land/x/lume_markdown_plugins@v0.7.0/toc.ts";
import image from "https://deno.land/x/lume_markdown_plugins@v0.7.0/image.ts";
import footnotes from "https://deno.land/x/lume_markdown_plugins@v0.7.0/footnotes.ts";
import { alert } from "npm:@mdit/plugin-alert@0.8.0";
import "lume/types.ts";
export const defaults = {
  feed: {
    output: [
      "/feed.xml",
      "/feed.json"
    ],
    query: "type=post",
    info: {
      title: "=metas.site",
      description: "=metas.description"
    },
    items: {
      title: "=title"
    }
  }
};
/** Configure the site */ export default function(userOptions) {
  const options = merge(defaults, userOptions);
  return (site)=>{
    site.use(postcss()).use(basePath()).use(toc()).use(prism(options.prism)).use(readingInfo()).use(date(options.date)).use(metas()).use(image()).use(footnotes()).use(resolveUrls()).use(slugifyUrls()).use(terser()).use(pagefind(options.pagefind)).use(sitemap()).use(feed(options.feed)).copy("fonts").copy("js").copy("favicon.png").mergeKey("extra_head", "stringArray").preprocess([
      ".md"
    ], (pages)=>{
      for (const page of pages){
        page.data.excerpt ??= page.data.content.split(/<!--\s*more\s*-->/i)[0];
      }
    });
    // Alert plugin
    site.hooks.addMarkdownItPlugin(alert);
    // Mastodon comment system
    site.remoteFile("/js/comments.js", "https://unpkg.com/@oom/mastodon-comments@0.2.1/src/comments.js");
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvbHVtZV90aGVtZV9zaW1wbGVfYmxvZ0B2MC4xNS4yL3BsdWdpbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRhdGUsIHsgT3B0aW9ucyBhcyBEYXRlT3B0aW9ucyB9IGZyb20gXCJsdW1lL3BsdWdpbnMvZGF0ZS50c1wiO1xuaW1wb3J0IHBvc3Rjc3MgZnJvbSBcImx1bWUvcGx1Z2lucy9wb3N0Y3NzLnRzXCI7XG5pbXBvcnQgdGVyc2VyIGZyb20gXCJsdW1lL3BsdWdpbnMvdGVyc2VyLnRzXCI7XG5pbXBvcnQgcHJpc20sIHsgT3B0aW9ucyBhcyBQcmlzbU9wdGlvbnMgfSBmcm9tIFwibHVtZS9wbHVnaW5zL3ByaXNtLnRzXCI7XG5pbXBvcnQgYmFzZVBhdGggZnJvbSBcImx1bWUvcGx1Z2lucy9iYXNlX3BhdGgudHNcIjtcbmltcG9ydCBzbHVnaWZ5VXJscyBmcm9tIFwibHVtZS9wbHVnaW5zL3NsdWdpZnlfdXJscy50c1wiO1xuaW1wb3J0IHJlc29sdmVVcmxzIGZyb20gXCJsdW1lL3BsdWdpbnMvcmVzb2x2ZV91cmxzLnRzXCI7XG5pbXBvcnQgbWV0YXMgZnJvbSBcImx1bWUvcGx1Z2lucy9tZXRhcy50c1wiO1xuaW1wb3J0IHBhZ2VmaW5kLCB7IE9wdGlvbnMgYXMgUGFnZWZpbmRPcHRpb25zIH0gZnJvbSBcImx1bWUvcGx1Z2lucy9wYWdlZmluZC50c1wiO1xuaW1wb3J0IHNpdGVtYXAgZnJvbSBcImx1bWUvcGx1Z2lucy9zaXRlbWFwLnRzXCI7XG5pbXBvcnQgZmVlZCwgeyBPcHRpb25zIGFzIEZlZWRPcHRpb25zIH0gZnJvbSBcImx1bWUvcGx1Z2lucy9mZWVkLnRzXCI7XG5pbXBvcnQgcmVhZGluZ0luZm8gZnJvbSBcImx1bWUvcGx1Z2lucy9yZWFkaW5nX2luZm8udHNcIjtcbmltcG9ydCB7IG1lcmdlIH0gZnJvbSBcImx1bWUvY29yZS91dGlscy9vYmplY3QudHNcIjtcbmltcG9ydCB0b2MgZnJvbSBcImh0dHBzOi8vZGVuby5sYW5kL3gvbHVtZV9tYXJrZG93bl9wbHVnaW5zQHYwLjcuMC90b2MudHNcIjtcbmltcG9ydCBpbWFnZSBmcm9tIFwiaHR0cHM6Ly9kZW5vLmxhbmQveC9sdW1lX21hcmtkb3duX3BsdWdpbnNAdjAuNy4wL2ltYWdlLnRzXCI7XG5pbXBvcnQgZm9vdG5vdGVzIGZyb20gXCJodHRwczovL2Rlbm8ubGFuZC94L2x1bWVfbWFya2Rvd25fcGx1Z2luc0B2MC43LjAvZm9vdG5vdGVzLnRzXCI7XG5pbXBvcnQgeyBhbGVydCB9IGZyb20gXCJucG06QG1kaXQvcGx1Z2luLWFsZXJ0QDAuOC4wXCI7XG5cbmltcG9ydCBcImx1bWUvdHlwZXMudHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBPcHRpb25zIHtcbiAgcHJpc20/OiBQYXJ0aWFsPFByaXNtT3B0aW9ucz47XG4gIGRhdGU/OiBQYXJ0aWFsPERhdGVPcHRpb25zPjtcbiAgcGFnZWZpbmQ/OiBQYXJ0aWFsPFBhZ2VmaW5kT3B0aW9ucz47XG4gIGZlZWQ/OiBQYXJ0aWFsPEZlZWRPcHRpb25zPjtcbn1cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRzOiBPcHRpb25zID0ge1xuICBmZWVkOiB7XG4gICAgb3V0cHV0OiBbXCIvZmVlZC54bWxcIiwgXCIvZmVlZC5qc29uXCJdLFxuICAgIHF1ZXJ5OiBcInR5cGU9cG9zdFwiLFxuICAgIGluZm86IHtcbiAgICAgIHRpdGxlOiBcIj1tZXRhcy5zaXRlXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCI9bWV0YXMuZGVzY3JpcHRpb25cIixcbiAgICB9LFxuICAgIGl0ZW1zOiB7XG4gICAgICB0aXRsZTogXCI9dGl0bGVcIixcbiAgICB9LFxuICB9LFxufTtcblxuLyoqIENvbmZpZ3VyZSB0aGUgc2l0ZSAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHVzZXJPcHRpb25zPzogT3B0aW9ucykge1xuICBjb25zdCBvcHRpb25zID0gbWVyZ2UoZGVmYXVsdHMsIHVzZXJPcHRpb25zKTtcblxuICByZXR1cm4gKHNpdGU6IEx1bWUuU2l0ZSkgPT4ge1xuICAgIHNpdGUudXNlKHBvc3Rjc3MoKSlcbiAgICAgIC51c2UoYmFzZVBhdGgoKSlcbiAgICAgIC51c2UodG9jKCkpXG4gICAgICAudXNlKHByaXNtKG9wdGlvbnMucHJpc20pKVxuICAgICAgLnVzZShyZWFkaW5nSW5mbygpKVxuICAgICAgLnVzZShkYXRlKG9wdGlvbnMuZGF0ZSkpXG4gICAgICAudXNlKG1ldGFzKCkpXG4gICAgICAudXNlKGltYWdlKCkpXG4gICAgICAudXNlKGZvb3Rub3RlcygpKVxuICAgICAgLnVzZShyZXNvbHZlVXJscygpKVxuICAgICAgLnVzZShzbHVnaWZ5VXJscygpKVxuICAgICAgLnVzZSh0ZXJzZXIoKSlcbiAgICAgIC51c2UocGFnZWZpbmQob3B0aW9ucy5wYWdlZmluZCkpXG4gICAgICAudXNlKHNpdGVtYXAoKSlcbiAgICAgIC51c2UoZmVlZChvcHRpb25zLmZlZWQpKVxuICAgICAgLmNvcHkoXCJmb250c1wiKVxuICAgICAgLmNvcHkoXCJqc1wiKVxuICAgICAgLmNvcHkoXCJmYXZpY29uLnBuZ1wiKVxuICAgICAgLm1lcmdlS2V5KFwiZXh0cmFfaGVhZFwiLCBcInN0cmluZ0FycmF5XCIpXG4gICAgICAucHJlcHJvY2VzcyhbXCIubWRcIl0sIChwYWdlcykgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IHBhZ2Ugb2YgcGFnZXMpIHtcbiAgICAgICAgICBwYWdlLmRhdGEuZXhjZXJwdCA/Pz0gKHBhZ2UuZGF0YS5jb250ZW50IGFzIHN0cmluZykuc3BsaXQoXG4gICAgICAgICAgICAvPCEtLVxccyptb3JlXFxzKi0tPi9pLFxuICAgICAgICAgIClbMF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgLy8gQWxlcnQgcGx1Z2luXG4gICAgc2l0ZS5ob29rcy5hZGRNYXJrZG93bkl0UGx1Z2luKGFsZXJ0KTtcblxuICAgIC8vIE1hc3RvZG9uIGNvbW1lbnQgc3lzdGVtXG4gICAgc2l0ZS5yZW1vdGVGaWxlKFxuICAgICAgXCIvanMvY29tbWVudHMuanNcIixcbiAgICAgIFwiaHR0cHM6Ly91bnBrZy5jb20vQG9vbS9tYXN0b2Rvbi1jb21tZW50c0AwLjIuMS9zcmMvY29tbWVudHMuanNcIixcbiAgICApO1xuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sVUFBc0MsdUJBQXVCO0FBQ3BFLE9BQU8sYUFBYSwwQkFBMEI7QUFDOUMsT0FBTyxZQUFZLHlCQUF5QjtBQUM1QyxPQUFPLFdBQXdDLHdCQUF3QjtBQUN2RSxPQUFPLGNBQWMsNEJBQTRCO0FBQ2pELE9BQU8saUJBQWlCLCtCQUErQjtBQUN2RCxPQUFPLGlCQUFpQiwrQkFBK0I7QUFDdkQsT0FBTyxXQUFXLHdCQUF3QjtBQUMxQyxPQUFPLGNBQThDLDJCQUEyQjtBQUNoRixPQUFPLGFBQWEsMEJBQTBCO0FBQzlDLE9BQU8sVUFBc0MsdUJBQXVCO0FBQ3BFLE9BQU8saUJBQWlCLCtCQUErQjtBQUN2RCxTQUFTLEtBQUssUUFBUSw0QkFBNEI7QUFDbEQsT0FBTyxTQUFTLDBEQUEwRDtBQUMxRSxPQUFPLFdBQVcsNERBQTREO0FBQzlFLE9BQU8sZUFBZSxnRUFBZ0U7QUFDdEYsU0FBUyxLQUFLLFFBQVEsK0JBQStCO0FBRXJELE9BQU8sZ0JBQWdCO0FBU3ZCLE9BQU8sTUFBTSxXQUFvQjtFQUMvQixNQUFNO0lBQ0osUUFBUTtNQUFDO01BQWE7S0FBYTtJQUNuQyxPQUFPO0lBQ1AsTUFBTTtNQUNKLE9BQU87TUFDUCxhQUFhO0lBQ2Y7SUFDQSxPQUFPO01BQ0wsT0FBTztJQUNUO0VBQ0Y7QUFDRixFQUFFO0FBRUYsdUJBQXVCLEdBQ3ZCLGVBQWUsU0FBVSxXQUFxQjtFQUM1QyxNQUFNLFVBQVUsTUFBTSxVQUFVO0VBRWhDLE9BQU8sQ0FBQztJQUNOLEtBQUssR0FBRyxDQUFDLFdBQ04sR0FBRyxDQUFDLFlBQ0osR0FBRyxDQUFDLE9BQ0osR0FBRyxDQUFDLE1BQU0sUUFBUSxLQUFLLEdBQ3ZCLEdBQUcsQ0FBQyxlQUNKLEdBQUcsQ0FBQyxLQUFLLFFBQVEsSUFBSSxHQUNyQixHQUFHLENBQUMsU0FDSixHQUFHLENBQUMsU0FDSixHQUFHLENBQUMsYUFDSixHQUFHLENBQUMsZUFDSixHQUFHLENBQUMsZUFDSixHQUFHLENBQUMsVUFDSixHQUFHLENBQUMsU0FBUyxRQUFRLFFBQVEsR0FDN0IsR0FBRyxDQUFDLFdBQ0osR0FBRyxDQUFDLEtBQUssUUFBUSxJQUFJLEdBQ3JCLElBQUksQ0FBQyxTQUNMLElBQUksQ0FBQyxNQUNMLElBQUksQ0FBQyxlQUNMLFFBQVEsQ0FBQyxjQUFjLGVBQ3ZCLFVBQVUsQ0FBQztNQUFDO0tBQU0sRUFBRSxDQUFDO01BQ3BCLEtBQUssTUFBTSxRQUFRLE1BQU87UUFDeEIsS0FBSyxJQUFJLENBQUMsT0FBTyxLQUFLLEFBQUMsS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFZLEtBQUssQ0FDdkQscUJBQ0QsQ0FBQyxFQUFFO01BQ047SUFDRjtJQUVGLGVBQWU7SUFDZixLQUFLLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQztJQUUvQiwwQkFBMEI7SUFDMUIsS0FBSyxVQUFVLENBQ2IsbUJBQ0E7RUFFSjtBQUNGIn0=