import { markdownIt, markdownItAttrs, markdownItDeflist } from "../deps/markdown_it.ts";
import loader from "../core/loaders/text.ts";
import { merge } from "../core/utils/object.ts";
// Default options
export const defaults = {
  extensions: [
    ".md",
    ".markdown"
  ],
  options: {
    html: true
  },
  plugins: [],
  rules: {},
  useDefaultPlugins: true
};
const defaultPlugins = [
  markdownItAttrs,
  markdownItDeflist
];
/** Template engine to render Markdown files */ export class MarkdownEngine {
  engine;
  constructor(engine){
    this.engine = engine;
  }
  deleteCache() {}
  render(content, data, filename) {
    return this.renderComponent(content, data, filename);
  }
  renderComponent(content, data, filename) {
    if (typeof content !== "string") {
      content = String(content);
    }
    return this.engine.render(content, {
      filename,
      data
    });
  }
  addHelper() {}
}
/** Register the plugin to support Markdown */ export default function(userOptions) {
  const options = merge(defaults, userOptions);
  if (options.useDefaultPlugins) {
    options.plugins.unshift(...defaultPlugins);
  }
  return function(site) {
    const engine = markdownIt(options.options);
    // Disable indented code blocks by default
    engine.disable("code");
    // Register markdown-it plugins
    options.plugins.forEach((plugin)=>Array.isArray(plugin) ? engine.use(...plugin) : engine.use(plugin));
    // Hook to add markdown-it plugins
    site.hooks.addMarkdownItPlugin = (plugin, ...options)=>{
      engine.use(plugin, ...options);
    };
    // Register custom rules
    for (const [name, rule] of Object.entries(options.rules)){
      engine.renderer.rules[name] = rule;
    }
    // Hook to add custom rules
    site.hooks.addMarkdownItRule = (name, rule)=>{
      engine.renderer.rules[name] = rule;
    };
    site.hooks.markdownIt = (callback)=>callback(engine);
    // Load the pages
    site.loadPages(options.extensions, {
      loader,
      engine: new MarkdownEngine(engine)
    });
    // Register the md filter
    site.filter("md", filter);
    function filter(string, inline = false) {
      return inline ? engine.renderInline(string?.toString() || "").trim() : engine.render(string?.toString() || "").trim();
    }
  };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvbHVtZUB2Mi4yLjAvcGx1Z2lucy9tYXJrZG93bi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBtYXJrZG93bkl0LFxuICBtYXJrZG93bkl0QXR0cnMsXG4gIG1hcmtkb3duSXREZWZsaXN0LFxuICBNYXJrZG93bkl0T3B0aW9ucyxcbn0gZnJvbSBcIi4uL2RlcHMvbWFya2Rvd25faXQudHNcIjtcbmltcG9ydCBsb2FkZXIgZnJvbSBcIi4uL2NvcmUvbG9hZGVycy90ZXh0LnRzXCI7XG5pbXBvcnQgeyBtZXJnZSB9IGZyb20gXCIuLi9jb3JlL3V0aWxzL29iamVjdC50c1wiO1xuXG5pbXBvcnQgdHlwZSBTaXRlIGZyb20gXCIuLi9jb3JlL3NpdGUudHNcIjtcbmltcG9ydCB0eXBlIHsgRW5naW5lIH0gZnJvbSBcIi4uL2NvcmUvcmVuZGVyZXIudHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBPcHRpb25zIHtcbiAgLyoqIFRoZSBsaXN0IG9mIGV4dGVuc2lvbnMgdGhpcyBwbHVnaW4gYXBwbGllcyB0byAqL1xuICBleHRlbnNpb25zPzogc3RyaW5nW107XG5cbiAgLyoqIE9wdGlvbnMgcGFzc2VkIHRvIG1hcmtkb3duLWl0IGxpYnJhcnkgKi9cbiAgb3B0aW9ucz86IE1hcmtkb3duSXRPcHRpb25zO1xuXG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiBtYXJrZG93bi1pdCBwbHVnaW5zIHRvIHVzZVxuICAgKiBAZGVmYXVsdCBgW21hcmtkb3duSXRBdHRycywgbWFya2Rvd25JdERlZmxpc3RdYFxuICAgKi9cbiAgcGx1Z2lucz86IHVua25vd25bXTtcblxuICAvKiogVG8gbW9kaWZ5IGV4aXN0aW5nIHJ1bGVzIG9yIG5ldyBjdXN0b20gcnVsZXMgKi9cbiAgLy8gZGVuby1saW50LWlnbm9yZSBuby1leHBsaWNpdC1hbnlcbiAgcnVsZXM/OiBSZWNvcmQ8c3RyaW5nLCAoLi4uYXJnczogYW55W10pID0+IGFueT47XG5cbiAgLyoqIFNldCBgZmFsc2VgIHRvIHJlbW92ZSB0aGUgZGVmYXVsdCBwbHVnaW5zICovXG4gIHVzZURlZmF1bHRQbHVnaW5zPzogYm9vbGVhbjtcbn1cblxuLy8gRGVmYXVsdCBvcHRpb25zXG5leHBvcnQgY29uc3QgZGVmYXVsdHM6IE9wdGlvbnMgPSB7XG4gIGV4dGVuc2lvbnM6IFtcIi5tZFwiLCBcIi5tYXJrZG93blwiXSxcbiAgb3B0aW9uczoge1xuICAgIGh0bWw6IHRydWUsXG4gIH0sXG4gIHBsdWdpbnM6IFtdLFxuICBydWxlczoge30sXG4gIHVzZURlZmF1bHRQbHVnaW5zOiB0cnVlLFxufTtcblxuY29uc3QgZGVmYXVsdFBsdWdpbnMgPSBbXG4gIG1hcmtkb3duSXRBdHRycyxcbiAgbWFya2Rvd25JdERlZmxpc3QsXG5dO1xuXG5pbnRlcmZhY2UgTWFya2Rvd25JdEVuZ2luZSB7XG4gIHJlbmRlcjogKGlucHV0OiBzdHJpbmcsIGVudj86IFJlY29yZDxzdHJpbmcsIHVua25vd24+KSA9PiBzdHJpbmc7XG59XG5cbi8qKiBUZW1wbGF0ZSBlbmdpbmUgdG8gcmVuZGVyIE1hcmtkb3duIGZpbGVzICovXG5leHBvcnQgY2xhc3MgTWFya2Rvd25FbmdpbmUgaW1wbGVtZW50cyBFbmdpbmUge1xuICBlbmdpbmU6IE1hcmtkb3duSXRFbmdpbmU7XG5cbiAgY29uc3RydWN0b3IoZW5naW5lOiBNYXJrZG93bkl0RW5naW5lKSB7XG4gICAgdGhpcy5lbmdpbmUgPSBlbmdpbmU7XG4gIH1cblxuICBkZWxldGVDYWNoZSgpIHt9XG5cbiAgcmVuZGVyKFxuICAgIGNvbnRlbnQ6IHN0cmluZyxcbiAgICBkYXRhPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4gICAgZmlsZW5hbWU/OiBzdHJpbmcsXG4gICk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyQ29tcG9uZW50KGNvbnRlbnQsIGRhdGEsIGZpbGVuYW1lKTtcbiAgfVxuXG4gIHJlbmRlckNvbXBvbmVudChcbiAgICBjb250ZW50OiB1bmtub3duLFxuICAgIGRhdGE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbiAgICBmaWxlbmFtZT86IHN0cmluZyxcbiAgKTogc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mIGNvbnRlbnQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnRlbnQgPSBTdHJpbmcoY29udGVudCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmVuZ2luZS5yZW5kZXIoY29udGVudCBhcyBzdHJpbmcsIHsgZmlsZW5hbWUsIGRhdGEgfSk7XG4gIH1cblxuICBhZGRIZWxwZXIoKSB7fVxufVxuXG4vKiogUmVnaXN0ZXIgdGhlIHBsdWdpbiB0byBzdXBwb3J0IE1hcmtkb3duICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAodXNlck9wdGlvbnM/OiBPcHRpb25zKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSBtZXJnZShkZWZhdWx0cywgdXNlck9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zLnVzZURlZmF1bHRQbHVnaW5zKSB7XG4gICAgb3B0aW9ucy5wbHVnaW5zLnVuc2hpZnQoLi4uZGVmYXVsdFBsdWdpbnMpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChzaXRlOiBTaXRlKSB7XG4gICAgY29uc3QgZW5naW5lID0gbWFya2Rvd25JdChvcHRpb25zLm9wdGlvbnMpO1xuXG4gICAgLy8gRGlzYWJsZSBpbmRlbnRlZCBjb2RlIGJsb2NrcyBieSBkZWZhdWx0XG4gICAgZW5naW5lLmRpc2FibGUoXCJjb2RlXCIpO1xuXG4gICAgLy8gUmVnaXN0ZXIgbWFya2Rvd24taXQgcGx1Z2luc1xuICAgIG9wdGlvbnMucGx1Z2lucy5mb3JFYWNoKChwbHVnaW4pID0+XG4gICAgICBBcnJheS5pc0FycmF5KHBsdWdpbikgPyBlbmdpbmUudXNlKC4uLnBsdWdpbikgOiBlbmdpbmUudXNlKHBsdWdpbilcbiAgICApO1xuXG4gICAgLy8gSG9vayB0byBhZGQgbWFya2Rvd24taXQgcGx1Z2luc1xuICAgIHNpdGUuaG9va3MuYWRkTWFya2Rvd25JdFBsdWdpbiA9IChwbHVnaW4sIC4uLm9wdGlvbnMpID0+IHtcbiAgICAgIGVuZ2luZS51c2UocGx1Z2luLCAuLi5vcHRpb25zKTtcbiAgICB9O1xuXG4gICAgLy8gUmVnaXN0ZXIgY3VzdG9tIHJ1bGVzXG4gICAgZm9yIChjb25zdCBbbmFtZSwgcnVsZV0gb2YgT2JqZWN0LmVudHJpZXMob3B0aW9ucy5ydWxlcykpIHtcbiAgICAgIGVuZ2luZS5yZW5kZXJlci5ydWxlc1tuYW1lXSA9IHJ1bGU7XG4gICAgfVxuXG4gICAgLy8gSG9vayB0byBhZGQgY3VzdG9tIHJ1bGVzXG4gICAgc2l0ZS5ob29rcy5hZGRNYXJrZG93bkl0UnVsZSA9IChuYW1lLCBydWxlKSA9PiB7XG4gICAgICBlbmdpbmUucmVuZGVyZXIucnVsZXNbbmFtZV0gPSBydWxlO1xuICAgIH07XG5cbiAgICBzaXRlLmhvb2tzLm1hcmtkb3duSXQgPSAoY2FsbGJhY2spID0+IGNhbGxiYWNrKGVuZ2luZSk7XG5cbiAgICAvLyBMb2FkIHRoZSBwYWdlc1xuICAgIHNpdGUubG9hZFBhZ2VzKG9wdGlvbnMuZXh0ZW5zaW9ucywge1xuICAgICAgbG9hZGVyLFxuICAgICAgZW5naW5lOiBuZXcgTWFya2Rvd25FbmdpbmUoZW5naW5lKSxcbiAgICB9KTtcblxuICAgIC8vIFJlZ2lzdGVyIHRoZSBtZCBmaWx0ZXJcbiAgICBzaXRlLmZpbHRlcihcIm1kXCIsIGZpbHRlcik7XG5cbiAgICBmdW5jdGlvbiBmaWx0ZXIoc3RyaW5nOiBzdHJpbmcsIGlubGluZSA9IGZhbHNlKTogc3RyaW5nIHtcbiAgICAgIHJldHVybiBpbmxpbmVcbiAgICAgICAgPyBlbmdpbmUucmVuZGVySW5saW5lKHN0cmluZz8udG9TdHJpbmcoKSB8fCBcIlwiKS50cmltKClcbiAgICAgICAgOiBlbmdpbmUucmVuZGVyKHN0cmluZz8udG9TdHJpbmcoKSB8fCBcIlwiKS50cmltKCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiogRXh0ZW5kcyBIZWxwZXJzIGludGVyZmFjZSAqL1xuZGVjbGFyZSBnbG9iYWwge1xuICBuYW1lc3BhY2UgTHVtZSB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBIZWxwZXJzIHtcbiAgICAgIC8qKiBAc2VlIGh0dHBzOi8vbHVtZS5sYW5kL3BsdWdpbnMvbWFya2Rvd24vICovXG4gICAgICBtZDogKHN0cmluZzogc3RyaW5nLCBpbmxpbmU/OiBib29sZWFuKSA9PiBzdHJpbmc7XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FDRSxVQUFVLEVBQ1YsZUFBZSxFQUNmLGlCQUFpQixRQUVaLHlCQUF5QjtBQUNoQyxPQUFPLFlBQVksMEJBQTBCO0FBQzdDLFNBQVMsS0FBSyxRQUFRLDBCQUEwQjtBQTBCaEQsa0JBQWtCO0FBQ2xCLE9BQU8sTUFBTSxXQUFvQjtFQUMvQixZQUFZO0lBQUM7SUFBTztHQUFZO0VBQ2hDLFNBQVM7SUFDUCxNQUFNO0VBQ1I7RUFDQSxTQUFTLEVBQUU7RUFDWCxPQUFPLENBQUM7RUFDUixtQkFBbUI7QUFDckIsRUFBRTtBQUVGLE1BQU0saUJBQWlCO0VBQ3JCO0VBQ0E7Q0FDRDtBQU1ELDZDQUE2QyxHQUM3QyxPQUFPLE1BQU07RUFDWCxPQUF5QjtFQUV6QixZQUFZLE1BQXdCLENBQUU7SUFDcEMsSUFBSSxDQUFDLE1BQU0sR0FBRztFQUNoQjtFQUVBLGNBQWMsQ0FBQztFQUVmLE9BQ0UsT0FBZSxFQUNmLElBQThCLEVBQzlCLFFBQWlCLEVBQ1Q7SUFDUixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxNQUFNO0VBQzdDO0VBRUEsZ0JBQ0UsT0FBZ0IsRUFDaEIsSUFBOEIsRUFDOUIsUUFBaUIsRUFDVDtJQUNSLElBQUksT0FBTyxZQUFZLFVBQVU7TUFDL0IsVUFBVSxPQUFPO0lBQ25CO0lBQ0EsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFtQjtNQUFFO01BQVU7SUFBSztFQUNoRTtFQUVBLFlBQVksQ0FBQztBQUNmO0FBRUEsNENBQTRDLEdBQzVDLGVBQWUsU0FBVSxXQUFxQjtFQUM1QyxNQUFNLFVBQVUsTUFBTSxVQUFVO0VBRWhDLElBQUksUUFBUSxpQkFBaUIsRUFBRTtJQUM3QixRQUFRLE9BQU8sQ0FBQyxPQUFPLElBQUk7RUFDN0I7RUFFQSxPQUFPLFNBQVUsSUFBVTtJQUN6QixNQUFNLFNBQVMsV0FBVyxRQUFRLE9BQU87SUFFekMsMENBQTBDO0lBQzFDLE9BQU8sT0FBTyxDQUFDO0lBRWYsK0JBQStCO0lBQy9CLFFBQVEsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQ3ZCLE1BQU0sT0FBTyxDQUFDLFVBQVUsT0FBTyxHQUFHLElBQUksVUFBVSxPQUFPLEdBQUcsQ0FBQztJQUc3RCxrQ0FBa0M7SUFDbEMsS0FBSyxLQUFLLENBQUMsbUJBQW1CLEdBQUcsQ0FBQyxRQUFRLEdBQUc7TUFDM0MsT0FBTyxHQUFHLENBQUMsV0FBVztJQUN4QjtJQUVBLHdCQUF3QjtJQUN4QixLQUFLLE1BQU0sQ0FBQyxNQUFNLEtBQUssSUFBSSxPQUFPLE9BQU8sQ0FBQyxRQUFRLEtBQUssRUFBRztNQUN4RCxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHO0lBQ2hDO0lBRUEsMkJBQTJCO0lBQzNCLEtBQUssS0FBSyxDQUFDLGlCQUFpQixHQUFHLENBQUMsTUFBTTtNQUNwQyxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHO0lBQ2hDO0lBRUEsS0FBSyxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsV0FBYSxTQUFTO0lBRS9DLGlCQUFpQjtJQUNqQixLQUFLLFNBQVMsQ0FBQyxRQUFRLFVBQVUsRUFBRTtNQUNqQztNQUNBLFFBQVEsSUFBSSxlQUFlO0lBQzdCO0lBRUEseUJBQXlCO0lBQ3pCLEtBQUssTUFBTSxDQUFDLE1BQU07SUFFbEIsU0FBUyxPQUFPLE1BQWMsRUFBRSxTQUFTLEtBQUs7TUFDNUMsT0FBTyxTQUNILE9BQU8sWUFBWSxDQUFDLFFBQVEsY0FBYyxJQUFJLElBQUksS0FDbEQsT0FBTyxNQUFNLENBQUMsUUFBUSxjQUFjLElBQUksSUFBSTtJQUNsRDtFQUNGO0FBQ0YifQ==