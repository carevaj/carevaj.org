import { isUrl, normalizePath } from "../core/utils/path.ts";
import { merge } from "../core/utils/object.ts";
import { log } from "../core/utils/log.ts";
import { read } from "../core/utils/read.ts";
import { concurrent } from "../core/utils/concurrent.ts";
import { encodeBase64 } from "../deps/base64.ts";
import { Page } from "../core/file.ts";
import { basename, join, toFileUrl } from "../deps/path.ts";
export const defaults = {
  inline: false,
  sourceContent: false
};
/** Generate the source map files of assets */ export default function(userOptions) {
  const options = merge(defaults, userOptions);
  return (site)=>{
    site._data.enableSourceMap = true;
    site.process("*", (pages, allPages)=>concurrent(pages, (page)=>processSourceMap(page, allPages)));
    async function processSourceMap(file, files) {
      const sourceMap = file.data.sourceMap;
      file.data.sourceMap = undefined;
      if (!sourceMap) {
        return;
      }
      // Add the content of the source files
      try {
        if (options.sourceContent) {
          sourceMap.sourcesContent = await Promise.all(sourceMap.sources.map((url)=>{
            const content = sourceMap[dynamicSourcesSymbol]?.[url];
            return content ? content : read(url, false);
          }));
        }
      } catch (err) {
        log.error(`${err.message}\n${sourceMap.sources.join("\n")}`);
      }
      // Relative paths (eg. "../bar") look better in the dev-tools.
      sourceMap.sourceRoot = toFileUrl(site.root()).href;
      sourceMap.sources = sourceMap.sources.map((url)=>url.replace(sourceMap.sourceRoot, ""));
      // Inline the source map in the output file
      if (options.inline) {
        const url = `data:application/json;charset=utf-8;base64,${encodeBase64(JSON.stringify(sourceMap))}`;
        file.content += addSourceMap(file.outputPath, url);
        return;
      }
      // Create a source map file
      const url = file.outputPath + ".map";
      sourceMap.file = url;
      file.content += addSourceMap(file.outputPath, `./${basename(url)}`);
      files.push(Page.create({
        url,
        content: JSON.stringify(sourceMap)
      }));
    }
  };
}
/** Utilities to use by other plugins to manage source maps */ export const dynamicSourcesSymbol = Symbol.for("dynamicSources");
/** Return the required info to process a file */ export function prepareAsset(site, page) {
  const enableSourceMap = !!site._data.enableSourceMap;
  const content = page.content;
  const sourceMap = enableSourceMap ? page.data.sourceMap : undefined;
  const filename = page.src.path ? site.src(page.src.path + page.src.ext) : site.src(page.outputPath);
  return {
    content,
    sourceMap,
    filename,
    enableSourceMap
  };
}
/** Save the process result */ export function saveAsset(site, page, content, sourceMap) {
  if (!site._data.enableSourceMap) {
    sourceMap = undefined;
  }
  // There's no source map
  if (!sourceMap) {
    page.content = content;
    return;
  }
  const root = site.root();
  // Ensure the sourceMap is an object
  if (typeof sourceMap === "string") {
    sourceMap = JSON.parse(sourceMap);
  }
  // Normalize any source url
  function normalizeSource(source) {
    if (source.startsWith("deno:")) {
      source = source.substring(5);
    }
    if (isUrl(source)) {
      return source;
    }
    source = normalizePath(source);
    return source.startsWith(root) ? toFileUrl(decodeURIComponent(source)).href : toFileUrl(decodeURIComponent(join(root, source))).href;
  }
  sourceMap.sources = sourceMap.sources.filter((source)=>source !== "<no source>") // tailwindcss
  .map(normalizeSource);
  // Inherit the dynamic sources from the previous source map
  const previousSourceMap = page.data.sourceMap;
  if (previousSourceMap) {
    sourceMap[dynamicSourcesSymbol] = previousSourceMap[dynamicSourcesSymbol];
  }
  // If it's a dynamic source (not from the file system), store it in the source map
  if (!page.src.path) {
    const sources = sourceMap[dynamicSourcesSymbol] || {};
    const file = normalizeSource(site.src(page.outputPath));
    sourceMap[dynamicSourcesSymbol] = sources;
    if (!sources[file]) {
      sources[file] = page.content;
    }
  }
  // Store the new content and source map
  page.data.sourceMap = sourceMap;
  page.content = content;
}
function addSourceMap(url, sourceMap) {
  if (url.endsWith(".js")) {
    return `\n//# sourceMappingURL=${sourceMap}`;
  }
  // It's CSS
  return `\n/*# sourceMappingURL=${sourceMap} */`;
}
//# sourceMappingURL=data:application/json;base64,